#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

# Due to the Sync stores being temporarily unavailable,
# it's important that this runs from a local temp location.
#
# Note this is an issue with `mksync` only and not `mkvm`/`mkdev`.

if [ "$( script-path )" != '/tmp' ]; then
	cp "$( script-file )" "$( script-file ):init" /tmp/
	exec "/tmp/$( script-name )" "$@"
fi

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name )

		Replaces the existing GCP sync VM instance.
		BE SURE TO TAKE A SYNC STORAGE VOLUME SNAPSHOT FOR SAFETY!


		Mandatory arguments to long options are mandatory for short options too.
		  --os-release              Ubuntu release image to build atop.
		  --list-os-releases        List available images for the "Ubuntu OS Cloud" family.

		  --help                    Show this help text.


		OS Release
		  The Ubuntu OS release to use as a base image. This is either a release version
		  (e.g. "22.10" or "2210"), or the string "lts" (for the latest LTS release), or
		  the string "latest" (for the latest release). Default is "latest".

		  Note this selects an entry from GCP's list of "Ubuntu OS Cloud" images, and it
		  is possible that no available image exists for the requested "--os-release".

		  The "--lts" and "--latest" boolean flags are also available as shortcuts.

		  See '$( script-name ) --list-os-releases' for a list of available images.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if invalid conditions.
	EOF

}

# ---

{ # -- Utility Functions -- #

	image_project='ubuntu-os-cloud'

	function os-releases {
		local filter='(licenses[] ~ "/'"${image_project}"'/") AND (family !~ "minimal|arm64|accelerator")'
		gcloud compute images list --filter="$filter" --format='value(family)' | sort
	}

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set defaults.

	disk_size='10GB'
	instance_name='sync'
	machine_type_family='e2'
	machine_type_suffix='small'
	os_release='latest'
	startup_script_file="$( script-real ):init"

	# ---
	# ---

	CHAR_OPTS=''
	LONG_OPTS='help'

	LONG_OPTS="${LONG_OPTS},os-release:,os:,release:"
	LONG_OPTS="${LONG_OPTS},lts,latest"
	LONG_OPTS="${LONG_OPTS},list-os-releases,list-os-images,list-releases,list-images,releases,images"

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.


			(--os-release|--os|--release)
				os_release="$1" && shift
				;;

			(--lts)
				os_release='lts'
				;;

			(--latest)
				os_release='latest'
				;;

			(--list-os-releases|--list-os-images|--list-releases|--list-images|--releases|--images)
				os-releases | sed -r -e 's|^ubuntu-||' -e 's|-lts$| (lts)|' -e 's|-.*$||'
				exit-out
				;;

		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


# This can't run ON the sync instance.
#
[ "$instance_name" == "$( vm-name )" ] && error-out 2 'cannot replace current instance'


# ---


# Convert the given "os_release" value into an actual image "family" name.
#
case "$os_release" in
	latest)
		os-releases | tail -n1 | store-as image_family
		;;

	lts)
		os-releases | grep -F 'lts' | tail -n1 | store-as image_family
		;;

	*)
		'matches-line?' '[0-9]{4}' <<< "${os_release//./}" || error-out 1 'invalid os release number'
		os-releases | grep -F "${os_release//./}" | tail -n1 | store-as image_family
		;;
esac
[ -n "$image_family" ] || error-out 1 'requested os release not found'


# ---


# Tooling isn't available once the "sync" instance is killed,
# so we need to shadow some of our scripts with local functions.

function metadata {
	local metadata_key="$1" && shift

	# Set the GCP Metadata API's base URI.
	# (https://cloud.google.com/compute/docs/storing-retrieving-metadata)
	#
	local gcp_metadata_api='http://metadata.google.internal/computeMetadata/v1'

	# We're tacking on an `echo` because the metadata response is "too clean" (i.e. has no "\n").
	#
	curl "${gcp_metadata_api}/${metadata_key}" --silent --header 'Metadata-Flavor: Google' --fail && echo
}

function vm-project { metadata 'project/project-id'                    ;}
function vm-zone    { metadata 'instance/zone'      | sed -e 's|.*/||' ;}


# Remove old instance (if any).
#
# Note we're not calling `gcp destroy`, as there's
# no need to clean up DNS entries for the existing VM when
# we're about to create a new VM that'll set its DNS on init.
#
ssh sync 'sudo service nfs-kernel-server stop ; sync' &> /dev/null
yes | gcloud compute instances delete "$instance_name" --quiet &> /dev/null


# Create the Instance VM.
#
gcloud compute instances create "$instance_name"                       \
       --project="$( vm-project )" --zone="$( vm-zone )"               \
                                                                       \
       --machine-type="${machine_type_family}-${machine_type_suffix}"  \
       --boot-disk-type=pd-standard --boot-disk-size="$disk_size"      \
       --image-project="$image_project" --image-family="$image_family" \
                                                                       \
       --metadata="created-at=${SCRIPT_TIMESTAMP}"                     \
       --metadata-from-file "startup-script=${startup_script_file}"    \
                                                                       \
       --scopes=cloud-platform                                         \
       --network-tier=STANDARD                                         \
       --maintenance-policy=MIGRATE                                    \
                                                                       \
       --verbosity=error
