#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

# Due to the Sync stores being temporarily unavailable,
# it's important that this runs from a local temp location.
# Ideally, this should happen before any parameter processing.
#
# Note this is an issue with `mksync` only and not `mkdev`/`mkvm`.

if [ "$( script-path )" != '/tmp' ]; then
	cp "$( script-file )" "$( script-file ):init" /tmp/
	exec "/tmp/$( script-name )" "$@"
fi

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name )

		Replaces the existing GCP sync VM instance.
		BE SURE TO TAKE A SYNC STORAGE VOLUME SNAPSHOT FOR SAFETY!


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if invalid conditions.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


# This can't run ON the sync instance.
#
[ "$( vm-name )" == 'sync' ] && error-out 2 'cannot replace current instance'


# ---


# Tooling isn't available once the "sync" instance is killed,
# so we have to store a few values now.
#
vm-project | store-as vm_project
vm-zone    | store-as vm_zone


# Remove old instance (if any) *without calling `gcp`*.
#
ssh sync 'sudo service nfs stop ; sync' &> /dev/null
yes | gcloud compute instances delete 'sync' --quiet


# ---


# Note we're not specifying a boot image by name -- we're giving only the "project" and "family".
# See `gcloud compute images list` for a complete list of all available images.
#
image_project='ubuntu-os-cloud'
image_list_filter='(licenses[] ~ "/'"${image_project}"'/") AND (family !~ "minimal|arm64") AND (family ~ "lts")'
gcloud compute images list --filter="$image_list_filter" --format='value(family)' | sort | tail -n1 | store-as image_family


# Startup script.
#
startup_script_file="$( script-real ):init"


# Create the Sync VM.
#
gcloud compute instances create 'sync'                                 \
       --project="$vm_project" --zone="$vm_zone"                       \
                                                                       \
       --machine-type=e2-medium                                        \
       --boot-disk-type=pd-standard --boot-disk-size=10GB              \
       --image-project="$image_project" --image-family="$image_family" \
                                                                       \
       --metadata="created-at=${SCRIPT_TIMESTAMP}"                     \
       --metadata-from-file "startup-script=${startup_script_file}"    \
                                                                       \
       --scopes=cloud-platform                                         \
       --network-tier=STANDARD                                         \
       --maintenance-policy=MIGRATE                                    \
                                                                       \
       --verbosity=error
