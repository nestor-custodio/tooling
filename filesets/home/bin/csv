#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [--FILE_ENCODING] [--raw] QUERY [-- Q OPTIONS]
		       $( name-blanks ) [--FILE_ENCODING] --fields[=DATAFILE]

		No-thoughts CSV query runner (via 'q'); presents legible output.
		If QUERY begins with '@' or ends in '.sql', it's taken as a
		filename and its *content* is used as the querytext.

		If called with '--fields', gives field names (and types) for the
		DATAFILE. If no '--fields' DATAFILE is given, '-' (STDIN) is assumed.

		Presents pretty output in a scrollable view, unless '--raw' is given.


		Mandatory arguments to long options are mandatory for short options too.
		  --raw                     Outputs raw data (for storage or piping).
		  --help                    Show this help text.


		Delimiter Options
		  Data is assumed to be comma-delimited by default, but different
		  input and output delimiters can be specified.

		  --delimiter=[CHAR]        Sets '--delimiter-in' and '--delimiter-out'.
		  --delimiter-in=[CHAR]     Specifies the input delimiter.
		  --delimiter-out=[CHAR]    Specifies the ('--raw') output delimiter.
		  --csv                     Shortcut for '--delimiter=","'.
		  --tsv                     Shortcut for '--delimiter="<tab>"'.


		File Encodings
		  A file encoding flag can be given directly (e.g. '--utf-8').

		  Available file encodings are:
		  - utf-8
		  - utf-16
		  - utf-bom (utf-8 w/ BOM)
		  - iso-8859-1 / latin-1 / ascii
		  - windows-1252 / cp1252 / windows

		  Input files are assumed to be UTF-8 data unless stated otherwise.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if QUERY file (via @) or DATAFILE not found/readable.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set defaults.

	raw=''
	encoding='utf-8'
	delimiter_in=','
	delimiter_out=','

	# ---
	# ---

	CHAR_OPTS=''
	LONG_OPTS='help'
	LONG_OPTS="${LONG_OPTS},fields::,names::,types::"
	LONG_OPTS="${LONG_OPTS},raw,plain,output"
	LONG_OPTS="${LONG_OPTS},delimiter:,delimiters:"
	LONG_OPTS="${LONG_OPTS},delimiter-in:,in:"
	LONG_OPTS="${LONG_OPTS},delimiter-out:,out:"
	LONG_OPTS="${LONG_OPTS},csv,comma,commas"
	LONG_OPTS="${LONG_OPTS},tsv,tab,tabs"
	LONG_OPTS="${LONG_OPTS},utf-8"
	LONG_OPTS="${LONG_OPTS},utf-16"
	LONG_OPTS="${LONG_OPTS},utf-bom"
	LONG_OPTS="${LONG_OPTS},iso-8859-1,latin-1,ascii"
	LONG_OPTS="${LONG_OPTS},windows-1252,cp1252,windows"

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.


			(--fields|--names|--types)
				mode='fields'

				datafile="$1" && shift
				[ -n "$datafile" ] || datafile='-'
				[ "$datafile" == '-' ] || [ -r "$datafile" ] || error-out 2 'DATAFILE not readable'

				# shellcheck disable=SC2016
				q -d',' -H "SELECT * FROM ${datafile}" -A 2>/dev/null                       \
				| tail --lines=+5 | sed -r -e 's#^ *`(.*)` - (.*)$#\1|\2#'                  \
				| q -p "SELECT c1 as name, c2 as type FROM -" -b -O -T | bat --language='tsv'

				exit-out
				;;


			(--raw|--plain|--output) raw='1' ;;


			(--delimiter|--delimiters)
				delimiter="$1" && shift
				[ -n "$delimiter" ] || error-out 1 'no delimiter CHAR given'
				[ "${#delimiter}" == 1 ] || error-out 1 'delimiter CHAR must be a single character'

				delimiter_in="$delimiter"
				delimiter_out="$delimiter"
				;;

			(--delimiter-in|--in)
				delimiter="$1" && shift
				[ -n "$delimiter" ] || error-out 1 'no delimiter-in CHAR given'
				[ "${#delimiter}" == 1 ] || error-out 1 'delimiter-in CHAR must be a single character'

				delimiter_in="$delimiter"
				;;

			(--delimiter-out|--out)
				delimiter="$1" && shift
				[ -n "$delimiter" ] || error-out 1 'no delimiter-out CHAR given'
				[ "${#delimiter}" == 1 ] || error-out 1 'delimiter-out CHAR must be a single character'

				delimiter_out="$delimiter"
				;;

			(--csv|--comma|--commas) delimiter_in=','    && delimiter_out="$delimiter_in" ;;
			(--tsv|--tab|--tabs)     delimiter_in="$TAB" && delimiter_out="$delimiter_in" ;;


			(--utf-8                          ) encoding='utf-8'        ;;
			(--utf-16                         ) encoding='utf-16'       ;;
			(--utf-bom                        ) encoding='utf-8-sig'    ;;
			(--iso-8859-1|--latin-1|--ascii   ) encoding='iso-8859-1'   ;;
			(--windows-1252|--cp1252|--windows) encoding='windows-1252' ;;

		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	query_param="$1" && shift
	[ -n "$query_param" ] || error-out 1 'no QUERY given'

}

# ---
# ---


# Sort out the querytext.
#
if 'starts-with?' '@' <<< "$query_param"; then
	# We've been given a query *file*.
	#
	store-as querytext < "${query_param:1}"
elif 'ends-with?' '.sql' <<< "$query_param"; then
	# We've been given a query *file*.
	#
	store-as querytext < "$query_param"
else
	# We've been given the raw querytext.
	#
	querytext="$query_param"
fi


# Run the query.

function run_query() {
	q --skip-header                       \
	  --output-header                     \
	  --encoding="$encoding"              \
	  --delimiter="$delimiter_in"         \
	  --output-delimiter="$delimiter_out" \
	  "$querytext"                        \
	  "$@"
}

if [ -n "$raw" ]; then
	run_query "$@"
else
	delimiter_out=','

	run_query "$@"                                                                               \
	| awk -v OFS="$delimiter_out" '(NR == 1) { print "#", $0 }; (NR >= 2) { print NR, $0 };'     \
	| csview --delimiter="$delimiter_out" --disable-pager --style='ascii2' --header-align='left' \
	| hbat 2 --plain --chop-long-lines
fi
