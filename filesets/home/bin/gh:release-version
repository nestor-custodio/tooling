#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) REPO_ID

		Gives the version number of the latest release on the given Github repo.
		If Github has no "latest" *release*, the name of the latest tag is used.

		The REPO_ID value is given as "username/repo_name".


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	repo_id="$1" && shift
	[ -n "$repo_id" ] || error-out 1 'no REPO_ID given'


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


# Ensure a `gh` login.
#
# `gh` API request throttling can prevent us from asking
# for "latest release version" data if we're not logged in.
#
{ gh auth status --active || project attributes/gh_token | gh auth login --with-token ;} &> /dev/null


# Get tag name for latest release.
#
gh --repo="$repo_id" release view --json='tagName' --jq='.tagName' 2> /dev/null | store-as version_number

# Fall back to latest named tag in the repo.
#
[ -n "$version_number" ] || curl --silent --fail "https://api.github.com/repos/${repo_id}/tags" \
                            | sed -rn -e 's#\s*"name": "([^"]*)",?#\1# p' | head -n1            \
                            | store-as version_number

sed -r -e 's|^v||' <<< "$version_number"
