#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [ { me | safe } | { all | open } ] [BINDING]
		       $( script-name ) { off | stop }

		Starts/stops an auto-certing HTTP(S) reverse-proxy that shuttles traffic
		intended for "$( vm-name ).custodio.app" to the given BINDING. A BINDING
		may be of the form "HOST:PORT", or simply "PORT".

		The default HOST is "localhost" and default PORT is "3000", yielding a
		default BINDING of "localhost:3000" if nothing is given.

		If invoked via the "me"/"safe" command, only requests issued by the ssh-
		connected client are served. When invoked via "all"/"open", all requests
		will be served (subject to a blacklist of known scanners).


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	# Set defaults.

	command='safe'
	binding='localhost:3000'

	# ---
	# ---

	case "$#" in

		0)
			# Parameters set via defaults above.
			;;

		1)
			if grep -P --quiet -x '(?:.*:)?[0-9]{1,5}' <<< "$1"
				then binding="$1" && shift
				else command="$1" && shift
			fi
			;;

		2)
			command="$1" && shift
			binding="$1" && shift
			;;

		*)
			error-out 1 'too many arguments'
			;;

	esac

	# ---

	# Ensure defaults.

	if has? ':' <<< "$binding"; then
		# Binding is in "HOST:PORT" form.
		noop
	else
		if [ -z "${binding//[0-9.]/}" ]; then
			# Binding is a PORT.
			binding="localhost:${binding}"
		else
			error-out 1 "unrecognizable binding: '${binding}'"
		fi
	fi

}

# ---
# ---

function run_caddy() {
	# This expects:
	# - $binding
	# - $pidfile
	# - $caddy_bin
	# - $caddy_config
	#
	# Note also this doesn't produce any output on success,
	# but passes through STDOUT/STDERR (along with whatever
	# exit code `caddy` has returned) on failure.

	tempname | store-as caddyfile
	echo "$caddy_config" > "$caddyfile"

	tempname | store-as stdout_storage
	tempname | store-as stderr_storage

	sudo BINDING="$binding" "$caddy_bin" start "$@"                  \
	                                           --config="$caddyfile" \
	                                           --adapter='caddyfile' \
	                                           --pidfile="$pidfile"  \
	                                           1> "$stdout_storage"  \
	                                           2> "$stderr_storage"
	rm "$caddyfile"

	exit_code="$?"
	if [ "$exit_code" != '0' ]; then
		cat "$stderr_storage" 1>&2
		cat "$stdout_storage"

		rm "$stderr_storage"
		rm "$stdout_storage"

		exit-out "$exit_code"
	else
		rm "$stderr_storage"
		rm "$stdout_storage"
	fi
}

# ---
# ---


pidfile='/run/caddy.pid'
caddy_bin="$( command -v caddy )"

[ -e "$pidfile" ] && "$caddy_bin" stop &> /dev/null


case "$command" in

	(on|me|safe)
		sed -r -e 's|\{ +(#.*#) +\}|{\n\1\n}|' < "${HOME}/bin/https:safe.caddyfile" | store-as caddy_config
		caddy_config="${caddy_config/\#CLIENT_IP#/$( client-ip )}"

		run_caddy
		;;

	(all|open)
		sed -r -e 's|^|    remote_ip |' < "${HOME}/bin/vendor/caddy.ip-blacklist" | store-as ip_blacklist
		sed -r -e 's|(.*)|*\1*|' < "${HOME}/bin/vendor/caddy.uri-blacklist" | tr '\n' ' ' | store-as uri_blacklist

		sed -r -e 's|\{ +(#.*#) +\}|{\n\1\n}|' < "${HOME}/bin/https:open.caddyfile" | store-as caddy_config
		caddy_config="${caddy_config/\#IP_BLACKLIST#/$ip_blacklist}"
		caddy_config="${caddy_config/\#URI_BLACKLIST#/$uri_blacklist}"

		run_caddy
		qr "https://$( hostname ).custodio.app/"
		;;

	(off|stop)
		# Already handled above, since we always `caddy stop` before moving on.
		;;

	*)
		error-out 1 "unknown command: '${command}'"
		;;

esac


# Ensure logs are easily readable.
#
sudo touch /var/log/https-status-log
sudo chmod a+r /var/log/https-access-log*
