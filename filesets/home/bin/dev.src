#! /bin/env bash
shopt -s lastpipe

# ---

# Navigation helpers.

  function dev { cd "$DEV_ROOT" ;}


# Language helpers.

  # ruby

    # Console sanity.
    # (This gives us a way to add exceptions for things like Pry, etc, in "Gemfile"s.)
    #
    export IRB='1'

    # Executable management.
    #
    source "${HOME}/bin/vendor/chruby-source"
    source "${HOME}/bin/vendor/chruby-source.auto"

    # Linting/Style tooling.
    #
    export RUBOCOP_OPTS="--server --format='simple' --format='offenses' --color --editor-mode"
    #
    # shellcheck disable=SC2046
    function rubocop {
      # We only want to let `fd` handle the file list if all of the following are true:
      # - the user doesn't provide a filename (i.e. a non-flag argument)
      # - there is no '-h'/'--help' argument
      # - there is no '-s'/'--stdin' argument
      #
      declare -a args=("$@")
      local skip_fd_call=''
      for (( i=0; i < "${#args[*]}"; i++ )); do
        if [ -z "$skip_fd_call" ]; then
          [ "$( head -c1 <<< "${args[$i]}" )" != '-' ] && skip_fd_call='1'
          for j in -h --help -s --stdin; do [ "${args[$i]}" == "$j" ] && skip_fd_call='1'; done
        fi
      done

      if nearest --read 'Gemfile.lock' 'Gemfile' | has? 'rubocop'; then
        if [ -n "$skip_fd_call" ];
          then bx rubocop "$@"
          else bx rubocop --force-exclusion $( fd '\.rb$' ) "$@"
        fi
      else
        which rubocop &> /dev/null || gem install rubocop &> /dev/null
        if [ -n "$skip_fd_call" ];
          then "$( real rubocop )" "$@"
          else "$( real rubocop )" --force-exclusion $( fd '\.rb$' ) "$@"
        fi
      fi
    }


    # Bundle/Gemfile management.

      function bx { bundle exec "$@" ;}
      function br { bundle exec "$@" ;}

      # ---

      function ba {
        gem list bundler-audit --installed || gem install bundler-audit &> /dev/null
        bundle-audit check --update "$@"
      }

      # ---

      function bi {
        local gemfile="$( nearest 'Gemfile' )"
        local lockfile="$( nearest 'Gemfile.lock' )"

        # Ensure specific ruby.
        #
        local ruby_version
        if ruby_version="$( nearest --read '.ruby-version' )"; then
          ruby --version 2> /dev/null | has? "$ruby_version" || chruby "$ruby_version"                 \
          || { ruby-install "$ruby_version" && RUBIES=("${HOME}/.rubies"/*) && chruby "$ruby_version" ;}
        fi

        # Ensure specific bundler.
        #
        local bundler_version
        if [ -n "$lockfile" ]; then
          bundler_version="$( tail -n1 "$lockfile" | tr -d ' ' )"
          gem list bundler --silent --installed --version="$bundler_version" || gem install "bundler:${bundler_version}"
        else
          gem list bundler --silent --installed || gem install bundler
        fi

        # Bail if there's nothing to do.
        #
        [ -n "$gemfile" ] || [ -n "$lockfile" ] || return 0
        bundle check &> /dev/null && return 0

        # Install gemset (as quietly as possible, if invoked as just `bi`).
        #
        if [ "$#" == 0 ]
          then bundle install | grep -P -v '^(?:Using|Bundle complete!|Use `bundle info \[gemname\]`) '
          else bundle install "$@"
        fi

        true # Always move forward.
      }


    # Gem Release Tooling

      function release-gem {

        local option bump
        local gem_name repo_id old_version
        local parts major minor patch new_version

        # ---

        option="$1" && shift
        case "$option" in
          (--major) bump='major' ;;
          (--minor) bump='minor' ;;
          (--patch) bump='patch' ;;
        esac

        [ "$#" == 0 ] || return 1

        # ---

        pushd "$DEV_ROOT"

        gem_name="$( superbase ./*.gemspec )"
        [ -n "$gem_name" ] || return 2

        repo_id="$( gh repo set-default --view 2> /dev/null )"
        [ -n "$repo_id" ] || return 3

        old_version="$( gh:release-version "$repo_id" 2> /dev/null )"
        [ -n "$old_version" ] || old_version='0.0.0'


        # Determine new version number and prompt for confirmation ...

        IFS='.-' read -r -a parts <<< "$old_version"
        major="${parts[0]}"
        minor="${parts[1]}"
        patch="${parts[2]}"

        case "$bump" in
          (major)
            major="$( calc "${major} + 1" )"
            new_version="${major}.0.0"

            printf "Last release was '%s'.\nPublish new release as (%s):" "$old_version" "$new_version"
            read -r -p ' '; [ -n "$REPLY" ] && new_version="$REPLY"
            ;;

          (minor)
            minor="$( calc "${minor} + 1" )"
            new_version="${major}.${minor}.0"

            printf "Last release was '%s'.\nPublish new release as (%s):" "$old_version" "$new_version"
            read -r -p ' '; [ -n "$REPLY" ] && new_version="$REPLY"
            ;;

          (patch)
            patch="$( calc "${patch} + 1" )"
            new_version="${major}.${minor}.${patch}"

            printf "Last release was '%s'.\nPublish new release as (%s):" "$old_version" "$new_version"
            read -r -p ' '; [ -n "$REPLY" ] && new_version="$REPLY"
            ;;

          *)
            printf "Last release was '%s'.\nPublish new release as:" "$old_version"
            read -r -p ' ' new_version
            [ -n "$new_version" ] || return 4
           ;;
        esac


        # Repackage gem ...

        fd --exclude 'Gemfile*' | xargs -I '{}' -- sed -i -e "s|${old_version}|${new_version}|" '{}'
        yard doc
        gem build
        bundle install


        # Commit changes ...

        gcommit -am "version: release v${new_version}"
        gpush


        # Publish release ...

        gh release create "v${new_version}" --latest
        gem push "${gem_name}-${new_version}.gem"
        
      }


  # rails

    function rd { bx rails "$@" ;}

    function r- { rd destroy  "$@" ;}
    function r+ { rd generate "$@" ;}

    function rc { if spring? 2> /dev/null; then spring rails console "$@"; else rd console "$@"; fi ;}
    function rx { if spring? 2> /dev/null; then spring rails runner  "$@"; else rd runner  "$@"; fi ;}
    function rr { if spring? 2> /dev/null; then spring rails runner  "$@"; else rd runner  "$@"; fi ;}

    # ---

    function rails-db {
      local database="$DATABASE_URL"
      local db_config="${DEV_ROOT}/config/database.yml"

    	# Pull from Rails DB config, if no $DATABASE_URL was available.
    	#
    	[ -n "$database" ] || database="$( yaml ".${RAILS_ENV}.database" < "$db_config" 2> /dev/null )"
    	[ -n "$database" ] || return 1

      # Ensure we have a URL.
      #
      if ! matches? '://' <<< "$database"; then
        case "$( yaml ".${RAILS_ENV}.adapter" < "$db_config" 2> /dev/null )" in
          (postgresql) database="postgres://${USER}@postgres/${database}" ;;
          (mysql     ) database="mysql://${USER}@mysql/${database}" ;;
          (sqlite3   ) database="sqlite3://${database}" ;;

          *) return 2 ;;
        esac
      fi

      echo "$database"
    }

    function pending-migrations {
      local migration_files="$( ls -1 "${DEV_ROOT}/db/migrate"/??????????????_*.rb 2> /dev/null | grep -P --only-matching '(?<=/)[0-9]{14}(?=_)' )"

      local sql=()
      sql+=('CREATE TEMPORARY TABLE files (name TEXT)')
      while read name; do sql+=("INSERT INTO files VALUES ('${name}')"); done <<< "$migration_files"
      sql+=('SELECT files.name FROM files LEFT JOIN schema_migrations ON (name = version) WHERE (version IS NULL) ORDER BY 1')

      local IFS=';'
      usql "$( rails-db )" -Ct --quiet --command="${sql[*]}"
    }
    function pending-migrations? { [ -n "$( pending-migrations )" ] ;}

    function db: {                                  r+ migration   "$@" ;}
    function db+ { pending-migrations? || return 0; rd db:migrate  "$@" ;}
    function db- {                                  rd db:rollback "$@" ;}

    function db! {
      # Note most of this is a patch that allows using LazyMigrate v0.3.0 with Rails 7+.
      # See: https://github.com/jesseduffield/lazy_migrate/issues/66
      #
      rr "$( cat <<- RUBY
				require 'bundler/inline'
				gemfile {
				  source 'https://rubygems.org'
				  gem 'sane_patch'
				  gem 'lazy_migrate'
				}

				SanePatch.patch('lazy_migrate', '0.3.0') do
				  module LazyMigrate
				    class Client
				      class << self
				        def run
				          migrator_adapter = MigratorAdapterFactory.create_migrator_adapter

				          loop do
				            catch(:done) do
				              on_done = -> { throw(:done) }

				              database_name = if ActiveRecord::Base.respond_to?(:connection_db_config)
				                # Rails 7
				                ActiveRecord::Base.connection_db_config.database
				              else
				                # Rails <=6
				                ActiveRecord::Base.connection_config[:database]
				              end
				              prompt.ok("\nDatabase: #{database_name}\n")

				              select_migration_prompt(on_done: on_done, migrator_adapter: migrator_adapter)
				            end
				          end
				        rescue TTY::Reader::InputInterrupt
				          puts
				        end
				      end
				    end

				    class MigratorAdapter
				      # from 0.3.0
				      def dump_schema
				        return if !ActiveRecord.dump_schema_after_migration

				        # ripped from https://github.com/rails/rails/blob/5-1-stable/activerecord/lib/active_record/railties/databases.rake
				        filename = ENV["SCHEMA"] || File.join(ActiveRecord::Tasks::DatabaseTasks.db_dir, "schema.rb")
				        File.open(filename, "w:utf-8") do |file|
				          ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
				        end
				      end
				    end
				  end
				end

				LazyMigrate.run
			RUBY
			)"
    }

    function DB! {
      gem update  --silent sorbet-runtime
      gem cleanup --silent sorbet-runtime
      db!
    }

    # ---

    function rs {
      local procfile="${DEV_ROOT}/Procfile.dev"
      local dev_runner="${DEV_ROOT}/bin/dev"

      # Run any pending migrations.
      #
      db+ || return 1

      # Simpleton case: no "$procfile".
      #
      [ -e "$procfile" ] || { rd server "$@"; return "$?" ;}

      # Delegate to the "$dev_runner", if one exists.
      #
      [ -x "$dev_runner" ] && { "$dev_runner" "$@"; return "$?" ;}

      # Ensure Foreman and trigger a "$procfile" `start`.
      #
      gem list foreman -i --silent || gem install foreman
      foreman start -f "$procfile" "$@"
    }
    function rs1 { RAILS_MAX_THREADS=1 WEB_CONCURRENCY=1 rs "$@" ;}

    function rails-tasks { nearest --quiet 'Gemfile' && rd --tasks="$1" --all ;}
    function rt { rails-tasks "$@" ;}


  # node

    # Executable management.
    #
    export N_PREFIX="${HOME}/.nodes"

    # Don't run Husky installer, and disable its
    # git hooks if `husky install` has already run.
    #
    export HUSKY='0'

    # Package helpers.

    function nx { npx       "$@" ;}
    function na { npm audit "$@" ;}

    function ni {
      # Ensure specific node/npm.
      #
      local current_version="$( node --version 2> /dev/null )"
      local requested_version="$( nearest --read '.node-version' )"
      case "$requested_version" in
        (lts) [ "$current_version" == "v$( n --lts )" ] || n lts ;;
        (latest) [ "$current_version" == "v$( n --latest )" ] || n latest ;;
        (''|node) [ -n "$current_version" ] || n lts ;;

        *) has? "$requested_version" <<< "$current_version" || n install "$requested_version" ;;
      esac

      # Install packages, if any.
      #
      nearest --quiet 'package.json' && npm install "$@" 2>/dev/null

      true # Always move forward.
    }


    # Command helpers.

      function nr { npm run       "$@" ;}
      function ns { npm run start "$@" ;}

      # ---

      function node-tasks {
        local lookup="$1" && shift
        [ -z "$lookup" ] && lookup='^' || lookup='^.*'"$lookup"'.*$'
        nearest --quiet 'package.json' && npm run | grep -P "$lookup" --context='1000' --color='always'
      }
      function nt { node-tasks "$@" ;}


  # yarn

    # Package helpers.

    function yx { yarn "$@" ;}
    function yr { yarn "$@" ;}

    function ya { yarn audit "$@" ;}

    # ---

    function yi {
      # Ensure specific node/npm.
      #
      local current_version="$( node --version 2> /dev/null )"
      local requested_version="$( nearest --read '.node-version' )"
      case "$requested_version" in
        (lts) [ "$current_version" == "v$( n --lts )" ] || n lts ;;
        (latest) [ "$current_version" == "v$( n --latest )" ] || n latest ;;
        (''|node) [ -n "$current_version" ] || n lts ;;

        *) has? "$requested_version" <<< "$current_version" || n install "$requested_version" ;;
      esac

      # Ensure (any) yarn.
      #
      command -v yarn &> /dev/null || npm install -g yarn

      # Install packages, if any.
      #
      nearest --quiet 'package.json' 'yarn.lock' && yarn install 2> /dev/null

      true # Always move forward.
    }


  # multi-language constructs

    function @ { IRB='' bi && ni ;}


# Platform helpers.

  # Google App Scripts

  function gapps { clasp "$@" ;}
  function gapps? { command -v clasp &> /dev/null ;}
  function gapps! { gapps? || npm install -g @google/clasp; gapps "$@" ;}


# ENV helpers.
# Note we want to define this stuff last so when we store the starting ("clean") list
# of ENV vars (as "${ENV_VARS[clean]}") it includes all of the variables defined above.

  function known-env-vars { export -p | sed -r -e 's|=.*$||' -e 's|^.* ||' | sort ;}
  export CLEAN_ENV_VARS; CLEAN_ENV_VARS="$( known-env-vars )"

  function set-env {
    local env_name="$1" && shift
    [ -n "$env_name" ] || return 1

    # Allow shortcuts.
    #
    case "$env_name" in
      (d|dev|development) env_name='development' ;;
      (t|test|testing)    env_name='test'        ;;
      (s|staging)         env_name='staging'     ;;
      (p|prod|production) env_name='production'  ;;
    esac

    export RUBY_ENV="$env_name"
    export RAILS_ENV="$env_name"
    export RACK_ENV="$env_name"
    export NODE_ENV="$env_name"
  }

  function load-env {
    local env_name="$1" && shift
    declare -a env_list=()

    # Allow shortcuts.
    #
    case "$env_name" in
      (d|dev|development) env_name='development' ;;
      (t|test|testing)    env_name='test'        ;;
      (s|staging)         env_name='staging'     ;;
      (p|prod|production) env_name='production'  ;;
    esac

    unload-env
    set-env "$env_name"

    # Check (and load) .env files in the same order as the 'dotenv' gem.
    # (https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use)
    #
                          env_list+=('.env')
    [ -n "$env_name" ] && env_list+=(".env.${env_name}")
                          env_list+=('.env.local')
    [ -n "$env_name" ] && env_list+=(".env.${env_name}.local")
    for env_file in "${env_list[@]}"; do source "${DEV_ROOT}/${env_file}" 2> /dev/null; done
  }

  function unload-env {
    local clean_vars_file="$( mktemp --dry-run -t 'unload-env.XXX' )"
    echo -n "${CLEAN_ENV_VARS}" > "$clean_vars_file"

    for new_env_var in $( known-env-vars | fgrep -vx --file="$clean_vars_file" ); do unset "$new_env_var"; done
    rm "$clean_vars_file"
  }

  # ---

  function development { set-env 'development'; "$@" ;}
  function testing     { set-env 'test'       ; "$@" ;}
  function staging     { set-env 'staging'    ; "$@" ;}
  function production  { set-env 'production' ; "$@" ;}

  function d { development "$@" ;}
  function t { testing     "$@" ;}
  function s { staging     "$@" ;}
  function p { production  "$@" ;}

  # Default to "development".
  #
  set-env 'development'




# Ensure all of the above-defined functions are usable in subshells as well.
#
export -f @ ba bi br bx d db! db+ db- db: DB! dev development gapps gapps! gapps? known-env-vars    \
          load-env na ni node-tasks nr ns nt nx p pending-migrations pending-migrations? production \
          r+ r- rails-db rails-tasks rc rd release-gem rr rs rs1 rt rubocop rx s set-env staging t  \
          testing unload-env ya yi yr yx
