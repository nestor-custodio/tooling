#! /bin/env bash
shopt -s lastpipe

# ---

# Lookup helpers.

  function dev {
    # Fuzzy-find-based dev location utility.
    # - If no search term is given, `cd` into the dev root.
    # - If a single match is found, `cd` into it or open it into the editor, as applicable.
    # - If multiple matches are found, allow interactive selection and then process as above.

    local search="$*"


    # We want to be at $DEV_ROOT before the editor runs
    # so file searches, etc are project-wide by default.
    #
    cd "$DEV_ROOT"


    # Simpleton case: no params given.
    #
    [ "$search" == '' ] && return 0


    # Compile list of all *possible* entries.
    #
    local directories_only list
    [ "${search: -1}" == '/' ] && directories_only="--type=d"
    list="$( fd "$directories_only" --hidden --exclude='.git/' --color='always' )"

    # Find *matching* entries, asking interactively if necessary.
    #
    local matches
    readarray -t matches < <( fzf --query="'${search} " --multi --select-1 --preview-window='default' <<< "$list" )


    # Process matches...
    #
    case "${#matches[*]}" in
      0)
        return 1
        ;;

      1)
        local match="${matches[0]}"
        case "$( file-class --follow "$match" )" in
          d) cd "./${match%/}" ;;
          r) "$EDITOR" -- "$match" ;;
        
          *)
            echo 'unexpected file class'
            return 1
            ;;
        esac
        ;;

      *)
        for (( i=0; i < "${#matches[*]}"; i++ )); do
          [ "$( file-class --follow "${matches[$i]}" )" == 'r' ] || return 1
        done

        "$EDITOR" -- "${matches[@]}"
        ;;
    esac
  }

  function :? { dev "$@" ;}


# Language helpers.

  # ruby

    # Executable management.
    #
    source "${HOME}/bin/vendor/chruby-source"
    source "${HOME}/bin/vendor/chruby-source.auto"

    # Linting/Style tooling.
    #
    export RUBOCOP_OPTS="--server --format='simple' --format='offenses' --color"
    #
    function rubocop {
      if nearest --read 'Gemfile.lock' 'Gemfile' | has? 'rubocop'; then
        bx rubocop "$@"
      else
        which rubocop &> /dev/null || gem install rubocop &> /dev/null
        "$( real rubocop )" "$@"
      fi
    }


    # Bundle/Gemfile management.

      function bx { bundle exec "$@" ;}
      function br { bundle exec "$@" ;}

      # ---

      function ba {
        gem list bundler-audit --installed || gem install bundler-audit &> /dev/null
        bundle-audit check --update "$@"
      }

      # ---

      function bi {
        local gemfile="$( nearest 'Gemfile' )"
        local lockfile="$( nearest 'Gemfile.lock' )"

        # Ensure specific ruby.
        #
        local ruby_version
        if ruby_version="$( nearest --read '.ruby-version' )"; then
          ruby --version 2> /dev/null | has? "$ruby_version" || chruby "$ruby_version"                 \
          || { ruby-install "$ruby_version" && RUBIES=("${HOME}/.rubies"/*) && chruby "$ruby_version" ;}
        fi

        # Ensure specific bundler.
        #
        local bundler_version
        if [ -n "$lockfile" ]; then
          bundler_version="$( tail -n1 "$lockfile" | tr -d ' ' )"
          gem list bundler --silent --installed --version="$bundler_version" || gem install "bundler:${bundler_version}"
        else
          gem list bundler --silent --installed || gem install bundler
        fi

        # Install gemset, if necessary.
        #
        { [ -n "$gemfile" ] || [ -n "$lockfile" ] ;} && { bundle check &> /dev/null || bundle install --jobs="$( nproc )" "$@" ;}

        true # Always move forward.
      }


    # Gem Release Tooling

      function release-gem {

        local option bump
        local gem_name repo_id old_version
        local parts major minor patch new_version

        # ---

        option="$1" && shift
        case "$option" in
          (--major) bump='major' ;;
          (--minor) bump='minor' ;;
          (--patch) bump='patch' ;;
        esac

        [ "$#" == 0 ] || return 1

        # ---

        pushd "$DEV_ROOT"

        gem_name="$( superbase ./*.gemspec )"
        [ -n "$gem_name" ] || return 2

        repo_id="$( gh repo set-default --view 2> /dev/null )"
        [ -n "$repo_id" ] || return 3

        old_version="$( gh:release-version "$repo_id" 2> /dev/null )"
        [ -n "$old_version" ] || old_version='0.0.0'


        # Determine new version number and prompt for confirmation ...

        IFS='.-' read -r -a parts <<< "$old_version"
        major="${parts[0]}"
        minor="${parts[1]}"
        patch="${parts[2]}"

        case "$bump" in
          (major)
            major="$( calc "${major} + 1" )"
            new_version="${major}.0.0"

            printf "Last release was '%s'.\nPublish new release as (%s):" "$old_version" "$new_version"
            read -r -p ' '; [ -n "$REPLY" ] && new_version="$REPLY"
            ;;

          (minor)
            minor="$( calc "${minor} + 1" )"
            new_version="${major}.${minor}.0"

            printf "Last release was '%s'.\nPublish new release as (%s):" "$old_version" "$new_version"
            read -r -p ' '; [ -n "$REPLY" ] && new_version="$REPLY"
            ;;

          (patch)
            patch="$( calc "${patch} + 1" )"
            new_version="${major}.${minor}.${patch}"

            printf "Last release was '%s'.\nPublish new release as (%s):" "$old_version" "$new_version"
            read -r -p ' '; [ -n "$REPLY" ] && new_version="$REPLY"
            ;;

          *)
            printf "Last release was '%s'.\nPublish new release as:" "$old_version"
            read -r -p ' ' new_version
            [ -n "$new_version" ] || return 4
           ;;
        esac


        # Repackage gem ...

        fd --exclude 'Gemfile*' | xargs -I '{}' -- sed -i -e "s|${old_version}|${new_version}|" '{}'
        yard doc
        gem build
        bundle install


        # Commit changes ...

        gcommit -am "version: release v${new_version}"
        gpush


        # Publish release ...

        gh release create "v${new_version}" --latest
        gem push "${gem_name}-${new_version}.gem"
        
      }


  # rails

    function rd { bx rails "$@" ;}

    function rc { rd console  "$@" ;}
    function r- { rd destroy  "$@" ;}
    function r+ { rd generate "$@" ;}
    function rx { rd runner   "$@" ;}
    function rr { rd runner   "$@" ;}

    # ---

    function rails-db {
      local database="$DATABASE_URL"
      local db_config="${DEV_ROOT}/config/database.yml"

    	# Pull from Rails DB config, if no $DATABASE_URL was available.
    	#
    	[ -n "$database" ] || database="$( yaml ".${RAILS_ENV}.database" < "$db_config" 2> /dev/null )"
    	[ -n "$database" ] || return 1

      # Ensure we have a URL.
      #
      if ! matches? '://' <<< "$database"; then
        case "$( yaml ".${RAILS_ENV}.adapter" < "$db_config" 2> /dev/null )" in
          (postgresql) database="postgres://${USER}@postgres/${database}" ;;
          (mysql     ) database="mysql://${USER}@mysql/${database}" ;;
          (sqlite3   ) database="sqlite3://${database}" ;;

          *) return 2 ;;
        esac
      fi

      echo "$database"
    }

    function pending-migrations {
      local migration_file_list="$( ls -m --width=0 "${DEV_ROOT}/db/migrate"/??????????????_*.rb 2> /dev/null | sed -r -e "s|\S*/([0-9]{14})_[^,]*|'\1'|g" )"
      usql "$( rails-db )" -Ct --command="SELECT files.name FROM UNNEST(ARRAY[${migration_file_list}]) AS files(name) LEFT JOIN schema_migrations ON (name = version) WHERE (version IS NULL) ORDER BY 1"
    }
    function pending-migrations? { [ -n "$( pending-migrations )" ] ;}

    function db: {                                  r+ migration   "$@" ;}
    function db+ { pending-migrations? || return 0; rd db:migrate  "$@" ;}
    function db- {                                  rd db:rollback "$@" ;}

    function db! {
      rr "require 'bundler/inline'
          gemfile {
            source 'https://rubygems.org'
            gem 'lazy_migrate'
          }
          LazyMigrate.run"
    }

    function DB! {
      gem update  --silent sorbet-runtime
      gem cleanup --silent sorbet-runtime
      db!
    }

    # ---

    function rs  { db+ && rd server "$@" ;}
    function rs1 { RAILS_MAX_THREADS=1 WEB_CONCURRENCY=1 rs "$@" ;}

    function rails-tasks { nearest --quiet 'Gemfile' && rd --tasks="$1" --all ;}
    function rt { rails-tasks "$@" ;}


  # node

    # Executable management.
    #
    export N_PREFIX="${HOME}/.nodes"

    # Don't run Husky installer, and disable its
    # git hooks if `husky install` has already run.
    #
    export HUSKY='0'

    # Package helpers.

    function nx { npx       "$@" ;}
    function na { npm audit "$@" ;}

    function ni {
      # Ensure specific node/npm.
      #
      local current_version="$( node --version 2> /dev/null )"
      local requested_version="$( nearest --read '.node-version' )"
      case "$requested_version" in
        (lts) [ "$current_version" == "v$( n --lts )" ] || n lts ;;
        (latest) [ "$current_version" == "v$( n --latest )" ] || n latest ;;
        (''|node) [ -n "$current_version" ] || n lts ;;

        *) has? "$requested_version" <<< "$current_version" || n install "$requested_version" ;;
      esac

      # Install packages, if any.
      #
      nearest --quiet 'package.json' && npm install "$@"

      true # Always move forward.
    }


    # Command helpers.

      function nr { npm run       "$@" ;}
      function ns { npm run start "$@" ;}

      # ---

      function node-tasks {
        local lookup="$1" && shift
        [ -z "$lookup" ] && lookup='^' || lookup='^.*'"$lookup"'.*$'
        nearest --quiet 'package.json' && npm run | grep -P "$lookup" --context='1000' --color='always'
      }
      function nt { node-tasks "$@" ;}


  # yarn

    # Package helpers.

    function yx { yarn "$@" ;}
    function yr { yarn "$@" ;}

    function ya { yarn audit "$@" ;}

    # ---

    function yi {
      # Ensure specific node/npm.
      #
      local current_version="$( node --version 2> /dev/null )"
      local requested_version="$( nearest --read '.node-version' )"
      case "$requested_version" in
        (lts) [ "$current_version" == "v$( n --lts )" ] || n lts ;;
        (latest) [ "$current_version" == "v$( n --latest )" ] || n latest ;;
        (''|node) [ -n "$current_version" ] || n lts ;;

        *) has? "$requested_version" <<< "$current_version" || n install "$requested_version" ;;
      esac

      # Ensure (any) yarn.
      #
      command -v yarn &> /dev/null || npm install -g yarn

      # Install packages, if any.
      #
      nearest --quiet 'package.json' 'yarn.lock' && yarn install 2> /dev/null

      true # Always move forward.
    }


  # multi-language constructs

    function @ { bi && ni ;}


# Platform helpers.

  # Google App Scripts

  function gapps { clasp "$@" ;}
  function gapps! { npm install -g @google/clasp ;}
  function gapps? { command -v clasp &> /dev/null ;}


# ENV helpers.
# Note we want to define this stuff last so when we store the starting ("clean") list
# of ENV vars (as "${ENV_VARS[clean]}") it includes all of the variables defined above.

  function known-env-vars { export -p | sed -r -e 's|=.*$||' -e 's|^.* ||' | sort ;}
  export CLEAN_ENV_VARS; CLEAN_ENV_VARS="$( known-env-vars )"

  function set-env {
    local env_name="$1" && shift
    [ -n "$env_name" ] || return 1

    # Allow shortcuts.
    #
    case "$env_name" in
      (d|dev|development) env_name='development' ;;
      (t|test|testing)    env_name='test'        ;;
      (s|staging)         env_name='staging'     ;;
      (p|prod|production) env_name='production'  ;;
    esac

    export RUBY_ENV="$env_name"
    export RAILS_ENV="$env_name"
    export RACK_ENV="$env_name"
    export NODE_ENV="$env_name"
  }

  function load-env {
    local env_name="$1" && shift
    declare -a env_list=()

    # Allow shortcuts.
    #
    case "$env_name" in
      (d|dev|development) env_name='development' ;;
      (t|test|testing)    env_name='test'        ;;
      (s|staging)         env_name='staging'     ;;
      (p|prod|production) env_name='production'  ;;
    esac

    unload-env
    set-env "$env_name"

    # Check (and load) .env files in the same order as the 'dotenv' gem.
    # (https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use)
    #
                          env_list+=('.env')
    [ -n "$env_name" ] && env_list+=(".env.${env_name}")
                          env_list+=('.env.local')
    [ -n "$env_name" ] && env_list+=(".env.${env_name}.local")
    for env_file in "${env_list[@]}"; do source "${DEV_ROOT}/${env_file}" 2> /dev/null; done
  }

  function unload-env {
    local clean_vars_file="$( mktemp --dry-run -t 'unload-env.XXX' )"
    echo -n "${CLEAN_ENV_VARS}" > "$clean_vars_file"

    for new_env_var in $( known-env-vars | fgrep -vx --file="$clean_vars_file" ); do unset "$new_env_var"; done
    rm "$clean_vars_file"
  }

  # ---

  function development { set-env 'development'; "$@" ;}
  function testing     { set-env 'test'       ; "$@" ;}
  function staging     { set-env 'staging'    ; "$@" ;}
  function production  { set-env 'production' ; "$@" ;}

  function d { development "$@" ;}
  function t { testing     "$@" ;}
  function s { staging     "$@" ;}
  function p { production  "$@" ;}

  # Default to "development".
  #
  set-env 'development'




# Ensure all of the above-defined functions are usable in subshells as well.
#
export -f :? @ ba bi br bx d db! db+ db- db: DB! dev development known-env-vars load-env   \
          na ni node-tasks nr ns nt nx p pending-migrations pending-migrations? production \
          rails-db rails-tasks rc rd release-gem rr rs rs1 rt rubocop rx r+ r- s set-env   \
          staging t testing unload-env ya yi yr yx
