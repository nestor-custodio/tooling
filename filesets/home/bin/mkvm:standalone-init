#! /bin/bash
shopt -s lastpipe

# ---
# ---


PATH=".:/home/nestor/bin:/home/nestor/bin/vendor:/snap/bin:$PATH"

init_log='/var/log/init'
startup_log='/var/log/startup'


# ---
# ---


# -- INIT -- #
[ -e "$init_log" ] || {

	function report {
		local report="$1" && shift
		echo -e "\n\n------------------------------------------------------------------------\n@ $( date '+%s' ): ${report}\n"
	}

	# ---

	function metadata {
		local metadata_key="$1" && shift

		# Set the GCP Metadata API's base URI.
		# (https://cloud.google.com/compute/docs/storing-retrieving-metadata)
		#
		local gcp_metadata_api='http://metadata.google.internal/computeMetadata/v1'


		# We're tacking on an `echo` because the metadata response is "too clean" (i.e. has no "\n").
		#
		curl "${gcp_metadata_api}/${metadata_key}" --silent --header 'Metadata-Flavor: Google' --fail && echo
	}

	function project {
		local metadata_key="$1" && shift
		metadata "project/${metadata_key}"
	}

	function instance {
		local metadata_key="$1" && shift
		metadata "instance/${metadata_key}"
	}

	# ---
	# ---

	{ # -- Global PRE Config -- #

		# Add user account.
		report 'adding user account'

			adduser nestor                    \
			        --disabled-password       \
			        --gecos='Nestor Custodio'


		# Set system behaviours.
		report 'setting system behaviours'

			# Set timezone ...
			timedatectl set-timezone 'America/Chicago'

			# Silence all MOTD text ...
			chmod a-x /etc/update-motd.d/*

			# Set sudo password appearance ...
			echo 'Defaults pwfeedback' >> /etc/sudoers

			# Increase inotify watcher count ...
			echo 'fs.inotify.max_user_watches=524288' >> /etc/sysctl.conf && sysctl -p

			# Facilitate future Docker usage (avoid socket access error)...
			addgroup --quiet        docker
			adduser  --quiet nestor docker

			# Set "/etc/hosts" ownership so we can use `hostctl` without `sudo` ...
			chown nestor:nestor /etc/hosts

			# Prevent apt-get from hanging on "unable to initialize front" errors ...
			debconf-set-selections <<< 'debconf debconf/frontend select noninteractive'

			# Prevent tmux server from being killed off, even on full user logout ...
			sed -ri -e 's|^#KillUserProcesses=.*$|KillUserProcesses=no|' /etc/systemd/logind.conf

			# Silence output generated by the apt-get "needsrestart" post-event hook ...
			sed -ri -e 's|^#$nrconf\{verbosity\} =.*;$|$nrconf{verbosity} = 0;|' /etc/needrestart/needrestart.conf

			# Schedule regular pruning of the journal log ...
			crontab -l 2>/dev/null | awk '{print} END{ print "@daily journalctl --rotate --vacuum-time=2d" }' | crontab -

			# Schedule regular pruning of the `snapd` cache ...
			crontab -l 2>/dev/null | awk '{print} END{ print "@daily rm -f /var/lib/snapd/cache/*" }' | crontab -

			# Schedule continuous writing of "instantaneous CPU load" out to /var/opt/ ...
			crontab -l 2>/dev/null | awk '{print} END{ print "@reboot /home/nestor/bin/1s-cpu-load" }' | crontab -

			# Retain the minimum possible number of old snap builds ...
			snap set system refresh.retain=2


		# Install global packages.
		report 'installing global packages'

			apt-get -qq update
			apt-get -qqy install ansifilter      \
			                     asciinema       \
			                     build-essential \
			                     links           \
			                     nfs-common      \
			                     qrencode        \
			                     zip unzip

	}

	# ---
	# ---

	{ # -- Stand-Alone Setup -- #

		# Gain access to "tooling" repo.
		report 'cloning tooling repo into "links"'

			sudo --user='nestor' git clone 'https://github.com/nestor-custodio/tooling' /home/nestor/links


		# Set up tooling symlinks.
		report 'setting up symlinks'

			sudo --user='nestor' /home/nestor/links/symlinker


		# Populate "~/bin/vendor/".
		report 'loading in vendor tooling'

			sudo --user='nestor' /bin/bash -s <<-EOF
				source /home/nestor/bin/set-path.src
				/home/nestor/bin/vendor/vendor.update!
			EOF

	}

	# ---
	# ---

	{ # -- Global POST Config -- #

		# Install additional dependencies.
		report 'installing additional dependencies'

			global_installers="/home/nestor/bin/installers"
			ls "$global_installers"/*.deb &> /dev/null && apt install "$global_installers"/*.deb > /dev/null

			vm_specific_installer="/home/nestor/vm-scripts/$( instance name )/init"
			[ -e "$vm_specific_installer" ] && "$vm_specific_installer"

			apt-get -qqy install -f  # Resolve possible dependency issues.
			apt-get -qqy autoremove  # Remove unnecessary leftover packages.


		# Trigger the "@reboot 1s-cpu-load" cron job.
		report 'triggering 1s-cpu-load cron job'

			nohup /home/nestor/bin/1s-cpu-load &> /dev/null &


		# Notify of init completion.
		report 'notifying of init completion'

			cat <<-EOF | read -r -d '' notification
				Hostname: $( hostname --short )
				External: $( wan-ip )
				Disk Use: $( df -h / --output='pcent,size,avail'                         \
				             | sed -r -e '1 d'                                           \
				                      -e 's| +|:|g'                                      \
				                      -e 's|^:?(.*):(.*):(.*)$|\1 of \2 (\3 Available)|' )

				Ready In: $( elapsed --since="@$( instance attributes/created-at )" )
			EOF
			notify pushover "VM Ready: $( instance name )" "$notification"


	  echo -e "\n\n... Init complete in $( puptime )."

	}

} > "$init_log" 2>&1


# ---
# ---


{ # -- STARTUP -- #

	# Create relevant DNS entries.

		expose-vm

} > "$startup_log" 2>&1
