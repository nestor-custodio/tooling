#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [{ --next | --fails }] [-- RUNNER_OPTIONS]

		Run all relevant TDD tooling for the project:
		- Supports Ruby RSpec and Minitest suites, along with Selenium tests.
		- Supports Javascript suites triggered via a "test" action.

		Any RUNNER_OPTIONS given are passed through to the "runner" subtooling.


		Mandatory arguments to long options are mandatory for short options too.
		  --fails                   Rerun only previously-failed tests.
		  --next                    Stop on the next failure.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set default.

	declare -A next
	declare -A fails

	# ---
	# ---

	CHAR_OPTS=''
	LONG_OPTS='help,next,stop,fail,fails,failures'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.


			(--next|--stop)
				next=( [rspec]='--next-failure' [js]='--bail' )
				;;

			(--fail|--fails|--failures)
				fails=( [rspec]='--only-failures' [js]='--onlyFailures' )
				;;

		esac
	done

}

# ---
# ---


# Ruby Testing


	# Set flags ...

		# Check for RSpec usage.

		nearest --read 'Gemfile.lock' 'Gemfile' | has? rspec && rspec='1'


		# Check for Minitest files.

		rg --quiet minitest test/ &> /dev/null && minitest='1'


	# Run the tests ...

		if [ -n "$rspec" ]; then
			opts=("$@")
			[ -n "${next[rspec]}"  ] && opts+=("${next[rspec]}")
			[ -n "${fails[rspec]}" ] && opts+=("${fails[rspec]}")
			tdd.rspec "${opts[@]}"
		fi

		if [ -n "$minitest" ]; then
			opts=("$@")
			[ -n "${next[minitest]}"  ] && opts+=("${next[minitest]}")
			[ -n "${fails[minitest]}" ] && opts+=("${fails[minitest]}")
			tdd.minitest "${opts[@]}"
		fi


# ---


# Javascript Testing


	# Set flags ...

		[ -r 'package.json' ] && json '.scripts.test' < package.json | store-as javascript


	# Run the tests ...

		if [ -n "$javascript" ]; then
			opts=("$@")
			[ -n "${next[js]}"  ] && opts+=("${next[js]}")
			[ -n "${fails[js]}" ] && opts+=("${fails[js]}")
			tdd.javascript "${opts[@]}"
		fi


# ---


calc? "$( script-duration) <= 300" || ding-me
