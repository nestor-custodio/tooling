#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) { vms | list-vms } [--all] [-- OPTIONS]

		       $( script-name ) { scp | cp } [-- OPTIONS] SOURCE TARGET

		       $( script-name ) { ssh | shell | connect } [USER@]INSTANCE_NAME
		       $( script-name ) { run | exec } [USER@]INSTANCE_NAME REMOTE_COMMAND


		       $( script-name ) { start | boot
		       $( name-blanks )   | restart | reboot
		       $( name-blanks )   | stop | shutdown | kill
		       $( name-blanks )   | suspend | sleep | resume | wake } INSTANCE_NAME


		       $( script-name ) rename INSTANCE_NAME NEW_INSTANCE_NAME

		       $( script-name ) scale INSTANCE_NAME { --machine-type MACHINE_TYPE | --micro
		       $( name-blanks )                                                   | --small
		       $( name-blanks )                                                   | --medium
		       $( name-blanks )                                                   | --standard }

		       $( script-name ) { destroy | delete | trash } INSTANCE_NAME


		Convenience wrapper for various Google Cloud Platform client commands.
		Acts as an alias for 'glcoud compute' when not used as above.


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.

		  --machine-type            Compute Instance machine type.
		    --micro                 Shortcut for "--machine-type=e2-micro".
		    --small                 Shortcut for "--machine-type=e2-small".
		    --medium                Shortcut for "--machine-type=e2-medium".
		    --standard              Shortcut for "--machine-type=e2-standard-2".


		Machine Types
		  See https://cloud.google.com/compute/vm-instance-pricing for a list of types.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if invalid request,
		  3  if other internal error.
	EOF

}

# ---

{ # -- Utility Functions -- #

	function is-localhost {
		local instance_name="$1" && shift
		[ -n "$instance_name" ] || error-out 3 'no instance name given'

		[ "$instance_name" == "$( vm-name )" ]
	}

	function instance-state {
		local instance_name="$1" && shift
		[ -n "$instance_name" ] || error-out 3 'no instance name given'

		gcloud compute instances list --filter="(name:'${instance_name}')" --format='value(status)'
	}

	# ---

	function instance-is-running { [ "$( instance-state "$@" )" == "RUNNING"    ] ;}
	function instance-is-stopped { [ "$( instance-state "$@" )" == "TERMINATED" ] ;}

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set defaults.

	all=''
	machine_type=''

	# --
	# --

	CHAR_OPTS=''
	LONG_OPTS='help,all,machine-type:,micro,small,medium,standard'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.


			(--all)
				all='1'
				;;

			(--machine-type)
				machine_type="$1" && shift
				;;

			(--micro)
				machine_type='e2-micro'
				;;

			(--small)
				machine_type='e2-small'
				;;

			(--medium)
				machine_type='e2-medium'
				;;

			(--standard)
				machine_type='e2-standard-2'
				;;

		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	[ "$#" != 0 ] || error-out 1 'no command given'


	command="$1" && shift
	case "$command" in

		(vms|list-vms)
			if [ -n "$all" ]; then
				gcloud compute instances list --sort-by='status,name' "$@"
			else
				gcloud compute instances list --sort-by='status,name' --filter="(status:'RUNNING')" "$@"
			fi
			;;

		# ---
		# ---

		(scp|cp)
			gcloud compute scp "$@"
			;;

		# ---
		# ---

		(ssh|shell|connect)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift

			# Run sanity checks.

				# Check for current-instance request.
				#
				is-localhost "$instance_name" && error-out 2 'cannot remote into localhost'


			gcloud compute ssh "$instance_name"
			;;

		(run|exec)
			[ "$#" -lt 2 ] && error-out 1 'an instance name and remote command are required'
			[ "$#" -gt 2 ] && error-out 1 'too many parameters'

			instance_name="$1" && shift
			remote_command="$1" && shift


			gcloud compute ssh "$instance_name" --command="$remote_command"
			;;

		# ---
		# ---

		(start|boot)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift


			gcloud compute instances start "$instance_name"
			;;

		(restart|reboot)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift


			gcloud compute instances reset "$instance_name"
			;;

		(stop|shutdown|kill)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift


			gcloud compute instances stop "$instance_name"
			;;

		# ---

		(suspend|sleep)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift


			gcloud compute instances suspend "$instance_name"
			;;

		(resume|wake)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift


			gcloud compute instances resume "$instance_name" || error-out 3 'instance failed to resume'
			sleep 2  # Instances will sometimes take a bit to fully wake and request their new IP.
			expose-vm "$instance_name"
			;;

		# ---
		# ---

		(rename)
			[ "$#" -lt 2 ] && error-out 1 'old and new instance names are required'
			[ "$#" -gt 2 ] && error-out 1 'too many parameters'

			old_instance_name="$1" && shift
			new_instance_name="$1" && shift


			# Run sanity checks.

				# Check for current-instance request.
				#
				is-localhost "$old_instance_name" && error-out 2 'cannot rename localhost'

				# Check that instance in question is currently *stopped*.
				#
				instance-is-stopped "$old_instance_name" || error-out 2 'cannot rename a running instance'


			gcloud beta compute instances set-name "$old_instance_name" --new-name="$new_instance_name" \
			&& dns del --for="$old_instance_name" &> /dev/null
			;;

		(scale)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift

			[ -n "$machine_type" ] || error-out 1 'no machine type given'


			# Run sanity checks.

				# Verify given machine type exists in the active zone.
				#
				gcloud compute machine-types list --zones="$( vm-zone )" \
				                                  --format='value(name)' \
				| has-line? "$machine_type" &> /dev/null || error-out 1 'invalid machine type'

				# This is a noop if the requested machine type is already set.
				#
				[ "$machine_type" == "$( instance machine-type --short )" ] && exit 0

				# Check for current-instance request.
				#
				is-localhost "$instance_name" && error-out 2 'cannot set scaling for localhost'

				# Check that instance in question is currently *stopped*.
				#
				instance-is-stopped "$instance_name" || error-out 2 'cannot set scaling on a running instance'


			gcloud compute instances set-machine-type "$instance_name" --machine-type="$machine_type"
			;;

		# ---

		(destroy|delete|trash)
			[ "$#" == 1 ] || error-out 1 'no instance name given'
			instance_name="$1" && shift


			# Note the actual VM deletion is triggered *last* to allow for destroy requests from within the target instance.
			# (Otherwise the VM deletion would occur before script completion, leaving some work undone.)


			# Remove DNS 'A' record.
			#
			dns delete --for="$instance_name" &> /dev/null

			# Delete the Instance VM.
			#
			yes | gcloud compute instances delete "$instance_name" --quiet
			;;

		# ---
		# ---

		*)
			gcloud compute "$command" "$@"
			;;

	esac

}

# ---
# ---


noop  # Positional parameter processing has already taken care of everything.
