#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) TOOL_NAME

		Asserts whether the corresponding binary is indeed the latest release.
		When this is not the case, both version numbers are reported via STDOUT.


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if update available.
	EOF

}

# ---

{ # -- Utility Functions -- #

	_executable=''
	function executable {
		[ -n "$_executable" ] && echo "$_executable" && return
	
		echo "${HOME}/bin/vendor/${tool_name}" | store-as _executable
		echo "$_executable"
	}

	_github_repo=''
	function github-repo {
		[ -n "$_github_repo" ] && echo "$_github_repo" && return
	
		store-as _github_repo < "$( executable ).repo"
		echo "$_github_repo"
	}

	_executable_url=''
	function executable-url {
		[ -n "$_executable_url" ] && echo "$_executable_url" && return
	
		store-as _executable_url < "$( executable ).url"
		echo "$_executable_url"
	}

	# ---
	
	function normalized-version {
		version="$1" && shift

		sed -r -e 's#^ +##'              \
		       -e 's# +$##'              \
		       -e 's#\b0+#0#g'           \
		       -e 's#\b0([^0.])#\1#g'    \
		       -e 's#\.$##' <<< "$version"
	}

	function check-version {

		# --cmd            The option/command that causes the tool to report its version.
		#                  (default: '--version')
		#
		# --puller         The regex that pulls an actual version number out of the tool's
		#                  version output.
		#                  (default: '.*')
		#
		# --local-version  The tool's current version number. When given, the executable is
		#                  never queried as that's unnecessary.
		#                  (default: '')

		# ---

		{ # -- Parameter Processing: Options -- #

			# Set defaults.

			cmd='--version'
			puller='.*'
			local_version=''

			# ---
			# ---

			CHAR_OPTS=''
			LONG_OPTS='cmd:,puller:,local-version:'

			set-params
			while true; do
				option="$1" && shift
				case "$option" in
					(--) break ;;  # No more options.


					(--cmd)
						cmd="$1" && shift
						;;

					(--puller)
						puller="$1" && shift
						;;

					(--local-version)
						local_version="$1" && shift
						;;

				esac
			done

		}

		{ # -- Parameter Processing: Positionals -- #

			[ "$#" == 0 ] || error-out 1 'invalid option(s)'

		}

		# ---
		# ---


		[ -z "$local_version" ] && "$( executable )" "$cmd" 2>&1 | grep -P --only-matching "$puller" | store-as local_version
		gh:release-version "$( github-repo )"                                                        | store-as release_version

		normalized-version "$local_version"   | store-as local_version
		normalized-version "$release_version" | store-as release_version

		[ "$local_version" == "$release_version" ] || exit-out 2 "${local_version} âžœ ${release_version}"

	}

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	tool_name="$1" && shift
	[ -n "$tool_name" ] || error-out 1 'no TOOL_NAME given'


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


case "$tool_name" in


	# Straight-forward `eget` pulls.

	(aws              ) check-version                  --puller='(?<=aws-cli/).*?(?= )'        ;;
	(bat              ) check-version                  --puller='(?<=bat ).*?(?= )'            ;;
	(btop             ) check-version                  --puller='(?<=btop version: ).*'        ;;
	(caddy            ) check-version                  --puller='(?<=v).*?(?= )'               ;;
	(circleci         ) check-version --cmd='version'  --puller='.*?(?=\+)'                    ;;
	(delta            ) check-version                  --puller='(?<=delta ).*'                ;;
	(eget             ) check-version                  --puller='(?<=eget version ).*'         ;;
	(eza              ) check-version                  --puller='(?<=v).*(?= )'                ;;
	(fd               ) check-version                  --puller='(?<=fd ).*'                   ;;
	(fzf              ) check-version                  --puller='.*(?= )'                      ;;
	(gh               ) check-version                  --puller='(?<=gh version ).*?(?= )'     ;;
	(heroku           ) check-version                  --puller='(?<=heroku/).*?(?= )'         ;;
	(hostctl          ) check-version                  --puller='(?<=hostctl version ).*'      ;;
	(hx               ) check-version                  --puller='(?<=helix ).*?(?= )'          ;;
	(jq               ) check-version                                                          ;;
	(lazydocker       ) check-version                  --puller='(?<=Version: ).*'             ;;
	(lazygit          ) check-version                  --puller='(?<=version=).*?(?=,)'        ;;
	(n                ) check-version                  --puller='(?<=v).*'                     ;;
	(portal           ) check-version --cmd='version'  --puller='(?<=v).*'                     ;;
	(q                ) check-version                  --puller='(?<=q version ).*'            ;;
	(rg               ) check-version                  --puller='(?<=ripgrep ).*?(?= )'        ;;
	(ruby-install     ) check-version                  --puller='(?<=ruby-install: ).*'        ;;
	(shellcheck       ) check-version                  --puller='(?<=version: ).*'             ;;
	(static-web-server) check-version                  --puller='(?<=Version: ).*'             ;;
	(unison           ) check-version --cmd='-version' --puller='(?<=unison version ).*?(?= )' ;;
	(usql             ) check-version                  --puller='(?<=usql ).*'                 ;;
	(watchexec        ) check-version                  --puller='(?<=release: ).*'             ;;
	(yq               ) check-version                  --puller='(?<=version v).*'             ;;


	# Items requiring special handling.

	(bw)
		# This tool's repo includes releases for multiple clients,
		# so we can't just blindly look for the one tagged "latest".

		bw --version | store-as local_version

		gh --repo="$( github-repo )" release list                 \
		| grep --only-matching '(?<=cli-v)[[:print:]]+'           \
		| sort --version-sort | tail -n1 | store-as release_version

		[ "$local_version" == "$release_version" ] || exit-out 2 "${local_version} âžœ ${release_version}"
		;;

	(crypt)
		# This tool provides no versioning info. ðŸ¤·.
		# Last update was back in 2020-11-24, however.
		noop
		;;

	(chruby)
		eval "$( head -n1 "${HOME}/bin/vendor/chruby-source" )"
		check-version --local-version="$CHRUBY_VERSION"
		;;

	(osc52)
		# This tool provides no versioning info. ðŸ¤·.
		# Last update was back in 2023-05-11, however.
		noop
		;;

	(marksman)
		# The Github release tags for this tool do not match
		# the release version numbers. ðŸ¤·.
		noop
		;;


	# Unknown tooling.

	*)
		error-out 1 "unknown tool '${tool_name}'"
		;;
esac
