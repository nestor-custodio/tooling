#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) TOOL_NAME

		Asserts whether the corresponding binary is indeed the latest release.
		When this is not the case, both version numbers are reported via STDOUT.


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if update available.
	EOF

}

# ---

{ # -- Utility Functions -- #

	_executable=''
	function executable {
		[ -n "$_executable" ] && echo "$_executable" && return
	
		echo "${HOME}/bin/vendor/${tool_name}" | store-as _executable
		echo "$_executable"
	}

	_github_repo=''
	function github-repo {
		[ -n "$_github_repo" ] && echo "$_github_repo" && return
	
		store-as _github_repo < "$( executable ).repo"
		echo "$_github_repo"
	}

	_executable_url=''
	function executable-url {
		[ -n "$_executable_url" ] && echo "$_executable_url" && return
	
		store-as _executable_url < "$( executable ).url"
		echo "$_executable_url"
	}

	# ---
	
	function normalized {
		sed -r -e 's#^ +##'              \
		       -e 's# +$##'              \
		       -e 's#\b0+#0#g'           \
		       -e 's#\b0([^0.])#\1#g'    \
		       -e 's#\.$##'
	}

	function check-version {
		vendor.version "$tool_name" 2> /dev/null | store-as local_version
		gh:release-version "$( github-repo )" | normalized | store-as release_version

		[ "$local_version" == "$release_version" ] || exit-out 2 "${local_version:-(?)} ➜ ${release_version}"
	}

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	tool_name="$1" && shift
	[ -n "$tool_name" ] || error-out 1 'no TOOL_NAME given'


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


case "$tool_name" in


	# Straight-forward checks.

	(bat              )               ;&
	(btop             )               ;&
	(caddy            )               ;&
	(chruby           )               ;&
	(csview           )               ;&
	(delta            )               ;&
	(duckdb           )               ;&
	(eget             )               ;&
	(eza              )               ;&
	(fd               )               ;&
	(fzf              )               ;&
	(gh               )               ;&
	(heroku           )               ;&
	(hostctl          )               ;&
	(hx               )               ;&
	(jq               )               ;&
	(lazydocker       )               ;&
	(lazygit          )               ;&
	(n                )               ;&
	(portal           )               ;&
	(q                )               ;&
	(rclone           )               ;&
	(rg               )               ;&
	(ruby-install     )               ;&
	(ruff             )               ;&
	(shellcheck       )               ;&
	(static-web-server)               ;&
	(unison           )               ;&
	(usql             )               ;&
	(watchexec        )               ;&
	(yq               ) check-version ;;


	# Items requiring special handling.

	(bw)
		# This tool's repo includes releases for multiple clients,
		# so we can't just blindly look for the one tagged "latest".

		vendor.version bw 2> /dev/null | store-as local_version

		gh --repo="$( github-repo )" release list                 \
		| grep --only-matching '(?<=cli-v)[[:print:]]+'           \
		| sort --version-sort | tail -n1 | store-as release_version

		[ "$local_version" == "$release_version" ] || exit-out 2 "${local_version:-(?)} ➜ ${release_version}"
		;;

	(crypt   ) ;&  # These tools provide no versioning info,
	(osc52   ) ;&  # or their Github release tags just do not match
	(marksman)     # the reported version numbers in any parseable way.
		command -V "$tool_name" &> /dev/null || exit-out 2 "(?) ➜ (release)"
		;;


	# Unknown tooling.

	*)
		error-out 1 "unknown tool '${tool_name}'"
		;;
esac
