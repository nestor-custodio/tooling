#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [TOOL_NAME] ...
		       $( name-blanks ) --checks-only

		Makes a best-effort attempt to update the corresponding binary.
		If no TOOL_NAME is given, all vendor tooling will be updated as needed.


		Mandatory arguments to long options are mandatory for short options too.
		  --checks-only             Only run the version checks; no downloads.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if fetch-related error.
	EOF

}

# ---

{ # -- Utility Functions -- #

	_all_tools=''
	function all-tools {
		[ -n "$_all_tools" ] && echo "$_all_tools" && return

		ls -1 --literal "${HOME}/bin/vendor"/*.repo | map superbase | store-as _all_tools
		echo "$_all_tools"
	}

	# ---

	_tool_name=''
	function set-tool { _tool_name="$1" ;}
	function tool-name { echo "$_tool_name" ;}

	function executable { echo "${HOME}/bin/vendor/$( tool-name )" ;}

	function github-repo { cat "$( executable ).repo" 2> /dev/null ;}

	function executable-url { cat "$( executable ).url" 2> /dev/null ;}


	function update-tooling {

		# Arguments/options passed into this will be passed through to the
		# underlying `eget` call. Most useful for `--asset`, `--source`, etc.

		# ---

		eget --quiet "$( github-repo )" "$@" --to="$( executable )" || error-out 2
		chmod 755 "$( executable )"

	}


	function update-deb-tooling {

		# Arguments/options passed into this will be passed through to the
		# underlying `eget` call. Most useful for `--asset`, `--source`, etc.

		# ---

		tempname | store-as extract_dir
		mkdir -p "$extract_dir"
		eget --quiet "$( github-repo )" --asset='.deb' "$@" --to='/dev/stdout' | dpkg --extract '/dev/stdin' "$extract_dir"
		mv "${extract_dir}/usr/bin/$( tool-name )" "$( executable )" &> /dev/null || error-out 2 'unable to fetch/find binary'
		chmod 755 "$( executable )"
		rm -rf "$extract_dir"

	}

	# ---

	function update {

		set-tool "$1" && shift
		case "$( tool-name )" in

			# Straight-forward `eget` pulls.

			(bat              ) update-tooling --asset='gnu'                                 ;;
			(btop             ) update-tooling                                               ;;
			(bw               ) update-tooling --asset='bw-linux' --asset='.zip' --tag='cli' ;;
			(caddy            ) update-tooling --asset='.tar.gz' --asset='^.sig'             ;;
			(circleci         ) update-tooling                                               ;;
			(delta            ) update-tooling --asset='gnu'                                 ;;
			(duckdb           ) update-tooling --asset='cli' --asset='.zip'                  ;;
			(eget             ) update-tooling                                               ;;
			(eza              ) update-tooling --asset='gnu.zip'                             ;;
			(fd               ) update-tooling --asset='gnu'                                 ;;
			(fzf              ) update-tooling                                               ;;
			(jq               ) update-tooling --asset='amd64'                               ;;
			(lazydocker       ) update-tooling                                               ;;
			(lazygit          ) update-tooling                                               ;;
			(marksman         ) update-tooling                                               ;;
			(n                ) update-tooling --source                                      ;;
			(q                ) update-tooling                                               ;;
			(rg               ) update-tooling                                               ;;
			(shellcheck       ) update-tooling                                               ;;
			(static-web-server) update-tooling --asset='gnu'                                 ;;
			(unison           ) update-tooling --asset='static'                              ;;
			(usql             ) update-tooling --asset='^static'                             ;;
			(yq               ) update-tooling --asset='^.tar.gz'                            ;;


			# Items available as a DEB package.

			(hostctl          ) update-deb-tooling                               ;;
			(gh               ) update-deb-tooling                               ;;
			(portal           ) update-deb-tooling --asset='.deb'                ;;
			(watchexec        ) update-deb-tooling --asset='gnu' --asset='^deb.' ;;


			# Items requiring special handling.

			(aws)
				target="${HOME}/bin/vendor/aws-runtime"
				mkdir -p "$target" && rm -rf "${target:?}"/*

				tempname | store-as zip_file
				curl "$( executable-url )" --silent --location > "$zip_file" || error-out 2 'unable to fetch release'

				tempname | store-as extract_dir
				{ mkdir -p "$extract_dir" && unzip -q "$zip_file" -d "$extract_dir" ;} || error-out 2 'unable to extract release'

				mv "${extract_dir}/aws/dist"/* "${target}/"
				rm -rf "$zip_file" "$extract_dir"
				;;

			(chruby)
				tempname | store-as extract_dir
				mkdir -p "$extract_dir"
				eget --quiet "$( github-repo )" --source --file='chruby.*' --all --to="$extract_dir"

				patch "${extract_dir}/chruby.sh" "${HOME}/bin/vendor/chruby-source:patch"      --output="${HOME}/bin/vendor/chruby-source"
				patch "${extract_dir}/auto.sh"   "${HOME}/bin/vendor/chruby-source.auto:patch" --output="${HOME}/bin/vendor/chruby-source.auto"
				chmod 644 "${HOME}/bin/vendor/chruby-source"*

				rm -rf "$extract_dir"
				;;

			(crypt)
				curl "$( executable-url )" --silent --location > "$( executable )" || error-out 2 'unable to fetch release'
				chmod 755 "$( executable )"
				;;

			(heroku)
				target="${HOME}/bin/vendor/heroku-runtime"
				mkdir -p "$target" && rm -rf "${target:?}"/*

				curl "$( executable-url )" --silent --location \
				| tar --gzip --extract --strip-components=1 --directory="$target" || error-out 2 'unable to fetch/extract release'
				;;

			(hx)
				# Archive the existing install.
				#
				if real hx &> /dev/null; then
					archive="${HOME}/bin/vendor/hx.archives/$( vendor.version hx )"
					if ! [ -d "$archive" ]; then
						mkdir -p "${archive}/config"
						cp "$( real hx )" "${archive}/hx"
						mirror --exclude='.git/' "${HOME}/.config/helix"/* "${archive}/config"
					fi
				fi

				# Actually install newer release.
				#
				update-tooling
				hx.setup!
				;;

			(osc52)
				curl "$( executable-url )?format=TEXT" --silent --location | base64 --decode > "$( executable )" || error-out 2 'unable to fetch release'
				chmod 755 "$( executable )"
				;;

			(ruby-install)
				target="${HOME}/bin/vendor/ruby-install-runtime"
				mkdir -p "$target" && rm -rf "${target:?}"/*

				eget --quiet "$( github-repo )" --download-only --source --to='/dev/stdout' \
				| tar --gzip --extract --strip-components=1 --directory="$target" || error-out 2 'unable to fetch/extract release'
				;;


			# Unknown tooling.

			*)
				error-out 1 "unknown tool '$( tool-name )'"
				;;
		esac

	}

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set defaults.

	checks_only=''

	# ---
	# ---

	CHAR_OPTS=''
	LONG_OPTS='help,check,checks,checks-only'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.

			(--check|--checks|--checks-only)
				checks_only='1'
				;;
		esac
	done

}

# ---
# ---


# Process --checks-only request.
#
if [ -n "$checks_only" ]; then

	# Sanity check: --checks-only and tool names are mutually exclusive.
	#
	[ "$#" == 0 ] || error-out 1 'cannot specify both a TOOL_NAME and --checks-only'


	all-tools | while read -r tool_name; do
		set-tool "$tool_name"

		printf "\e[1m%s\e[0m: ..." "$tool_name"
		vendor.latest? "$tool_name" | store-as update_report
		[ -z "$update_report" ] && clear-line && continue

		backspace 3 && echo "$update_report"
	done

	exit-out
fi


# Set up all tool names if none are given.
#
[ "$#" == 0 ] && eval set -- "$( all-tools | tr "\n" ' ' )"


# Process the list of tool names to update.
#
if [ "$#" == 1 ]; then

	# Singleton request, so there's no need to report version number or produce other output.
	#
	update "$1"

else

	while [ "$#" != 0 ]; do
		tool_name="$1" && shift

		printf "\e[1m%s\e[0m: ..." "$tool_name"
		vendor.latest? "$tool_name" | store-as update_report
		[ -z "$update_report" ] && clear-line && continue

		backspace 3
		echo -n "${update_report} ..."

		if ( update "$tool_name" )
			then backspace 3 && printf "\e[32;1m%s\e[0m\n" "âœ”"
			else backspace 3 && printf "\e[31;1m%s\e[0m\n" "x"
		fi
	done

fi
