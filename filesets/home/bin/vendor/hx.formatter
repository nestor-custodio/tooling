#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) LANGUAGE

		Runs a specialized linting process for the given LANGUAGE.


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	language="$1" && shift
	[ -n "$language" ] || error-out 1 'no LANGUAGE given'


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


# Since Helix can't give us a `pwd`,
# we have to assume "~/dev" for sanity's sake.
#
cd "${HOME}/dev" &> /dev/null


case "$language" in

	(ruby)
		rubocop --stdin source_file.rb --stderr --autocorrect --fail-level='fatal' < /dev/stdin
		;;


	(javascript|jsx)
		if nearest --read 'package.json' | json '(.dependencies // {}),(.devDependencies // {}) | keys[]' | has-line? 'prettier'; then
			npx prettier --version &> /dev/null || npm install prettier
			npx prettier --stdin-filepath='source_file.jsx' --parser='typescript' --log-level='error' < /dev/stdin
		else
			command -v prettier &> /dev/null || npm install --global --production prettier
			prettier --stdin-filepath='source_file.jsx' --parser='typescript' --log-level='error' < /dev/stdin
		fi
		;;

	*) error-out 1 'unexpected LANGUAGE' ;;
esac
