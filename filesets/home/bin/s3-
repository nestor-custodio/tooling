#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [--at MOUNT_POINT]

		Unmounts the S3 bucket at the given location.
		If no MOUNT_POINT is given, defaults to "\$DEV_ROOT/s3".


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if no active mount,
		  3  if failed to unmount.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set defaults.

	mount_point="${DEV_ROOT}/s3"

	# ---
	# ---

	CHAR_OPTS=''
	LONG_OPTS='help,mount:,at:,in:,on:'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.


			(--mount|--at|--in|--on)
				mount_point="$1" && shift
				;;

		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---

function unmount {
	umount "$mount_point"         && return 0
	umount "$mount_point" --force && return 0

	# Note we can't give `pkill` a full regex for the mount
	# (there is a 15-character limit to the match expression)
	# so we have to two-step with a `pgrep | fgrep` and THEN `kill`.
	#
	pgrep -a s3fs | fgrep "$mount_point" | cut --fields='1' --delimiter=' ' | store-as pid
	kill "$pid"
}

# ---
# ---


's3?' --at="$mount_point" || exit-out 2

sync "$mount_point"
unmount "$mount_point" &> /dev/null || exit-out 3

rmdir "$mount_point"
