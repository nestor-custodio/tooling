#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [ PORT | RANGE ]

		Reports whether the given PORT is available, or (if a RANGE is given)
		finds *and prints* an available port within the given RANGE. If no value
		is given, defaults to a RANGE of '3001-3999'.


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if no available port.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set defaults.

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	port_or_range="$1" && shift
	[ -n "$port_or_range" ] || port_or_range='3001-3999'


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


ss --all --ipv4 --numeric --no-header | awk '{ print $5 }' | cut -d':' -f2 | store-as ports_in_use

# We've been given a PORT.
#
if 'numeric?' "$port_or_range"; then
	if 'has-line?' "$port_or_range" <<< "$ports_in_use"
		then exit-out 1
		else exit-out 0
	fi

# We've been given a RANGE.
#
elif 'has-line?' --regex '\d+-\d+' <<< "$port_or_range"; then
	shuf -n1 --input-range="$port_or_range" | while read -r port; do
		'has-line?' "$port" <<< "$ports_in_use" || exit-out 0 "$port"
	done

	exit-out 2

# Unexpected param formatting.
#
else
	error-out 1 'unexpected param formatting'
fi
