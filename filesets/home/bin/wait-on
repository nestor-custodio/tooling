#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [PID ...]

		Waits for the given process(es) to terminate. If no arguments are given, PIDs
		are read from STDIN (one per line) until input is exhausted.

		Example:  pgrep ruby | $( script-name )  # Waits on all ruby processes to end.


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	function wait-on-pid {
		local pid="$1" && shift
		[ -n "$pid" ] || return

		integer? "$pid" || error-out 1 "non-integer PID: '${pid}'"
		tail --pid="$pid" -f /dev/null
	}

	# ---

	case "$#" in

		0)
			while read -r pid; do
				wait-on-pid "$pid"
			done
			;;

		*)
			while true; do
				pid="$1" && shift
				[ -n "$pid" ] || break

				wait-on-pid "$pid"
			done
			;;

	esac

}

# ---
# ---


# shellcheck disable=SC2317
noop  # Positional parameter processing has already taken care of everything.
