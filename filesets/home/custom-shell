#! /bin/env bash

[ -n "$PS1"            ] || return # Exit unless interactive.
[ -n "$_byobu_sourced" ] || return # Exit unless within a Byobu session.

# ---


# Set shell behaviours.
#
shopt -s autocd checkwinsize globstar interactive_comments lastpipe no_empty_cmd_completion sourcepath

# Set command history behaviours.
#
set +H # Disable history expansion ("!" usage).
shopt -s histappend # Append to the history file.


# Check for window changes and update $LINES/$COLUMNS as needed.
#
shopt -s checkwinsize


# ---


# Helper for absolute paths to real binaries.
#
function real {
  # We want a real binary, so `which` is a must.
  # shellcheck disable=SC2230
  #
  local binary="$( which "$@" )"

  realpath "$binary"
}


# Though the system only supports 256 color,
# setting $COLORTERM gives faster text rendering.
#
export COLORTERM='truecolor'


# Explicitly set our language and sorting collation of choice.
#
export LANG='en_US.UTF-8'
export LC_COLLATE='en_US.UTF-8'


# Explicitly set our $EDITOR of choice.
#
export EDITOR="$( real hx )"
function helix { "$EDITOR" "$@" ;}
function ::    { "$EDITOR" "$@" ;}


# Surface web content via our own `browser` helper.
#
export BROWSER="${HOME}/bin/browser"


# Postgres should connect to host "postgres" by default.
# (https://www.postgresql.org/docs/current/libpq-envars.html)
#
export PGHOST='postgres'


# Make it easier to navigate from a location under
# "~/links/home" to where it actually resides in the filesystem.
#
function break-out-of-links {
  local pwd="$( pwd -P )"
  local link_root="${HOME}/links/filesets/home/"
  starts-with? "$link_root" <<< "$pwd" && cd "${pwd//${link_root}/${HOME}/}"
}


# Filesystem navigation niceties.
#
function ...   { cd ../..       ;}
function ....  { cd ../../..    ;}
function ..... { cd ../../../.. ;}
#
function mkcd { mkdir -p "$1" && cd "$1" ;}


# Make it easier to mirror one location into another.
#
function mirror {
  rsync --verbose                               \
        --recursive --force                     \
        --whole-file --delete-during            \
        --links --perms --executability --times \
        "$@"
}


# ---


# Set sensible tooling defaults and shortcuts.

  # bat

  # It's nice to have a 1-char name for something
  # that will properly page/colorize help/manpage text.
  #
  function h { "$@" --help | bat --plain --language='help' ;}
  function m { MANPAGER='cat' man "$@" | bat --plain --language='man' ;}

  # Paging while retaining header lines is a common
  # enough need that we want to accomodate it easily.
  #
  function hbat {
    [ "$1" == '--help' ] && echo 'Usage: hbat [HEADER_HEIGHT] [BAT_OPTIONS]' && return 0

    local header_height='1'
    integer? "$1" && header_height="$1" && shift
    LESS="${LESS} --header=${header_height}" bat "$@"
  }


  # bw

  # The default `bw` data directory is
  # "~/.config/Bitwarden CLI", which... yikes.
  #
  export BITWARDENCLI_APPDATA_DIR="${HOME}/.config/bw"

  # Wrap all `bw` calls so we can automatically
  # append an active session key to the request.
  function bw { "$( real bw )" --session="$( creds bitwarden/session-key )" "$@" ;}


  # cd

  # Make it easier to `cd` into common locations.
  #
  export CDPATH=".:${HOME}:${HOME}/docs"


  # eget

  # Make sure `eget` knows where to download binaries to
  # *and* knows where to look for existing binaries when
  # determining timestamps for `--upgrade-only` purposes.
  #
  export EGET_BIN="${HOME}/bin/vendor"


  # eza

  function f {
    # shellcheck disable=SC2002
    # This is not in fact a "useless `cat`" -- it's needed to prevent STDERR output if a "~/.hidden" file does not exist.
    #
    local hide_globs="$( cat "${HOME}/.hidden" 2> /dev/null | paste -s --delimiters='|' )"

    eza --long --dereference --color='always' --group-directories-first --group --smart-group --time-style='long-iso' --no-quotes --ignore-glob="${hide_globs:-|}" "$@"
  }

  function a { f --almost-all --ignore-glob='|' "$@" ;}


  # fzf

  fzf_keybinding_spec="ctrl-i:up,ctrl-k:down,space:toggle,ctrl-space:toggle"

  fzf_preview_command="file --brief --mime-type -- {} | starts-with? 'text/'  \
                       && bat --force-colorization --line-range='1:200' -- {} \
                       || echo '(non-text content)'"

  export FZF_DEFAULT_COMMAND="fd --hidden --exclude='.git/' --color='always'"
  export FZF_DEFAULT_OPTS="--ansi                               \
                           --cycle                              \
                           --header=''                          \
                           --info='inline'                      \
                           --keep-right                         \
                           --layout='reverse'                   \
                                                                \
                           --bind='${fzf_keybinding_spec}'      \
                                                                \
                           --preview-window='hidden'            \
                           --preview=\"${fzf_preview_command}\" "


  # gcc

  # Colorize warnings/errors.
  #
  export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


  # git / lazygit

  function g { lazygit "$@" ;}

  function gadd        { git add                                    "$@" ;}
  function gblame      { git blame -w --minimal --color-by-age      "$@" ;}
  function gbranch     { git branch                                 "$@" ;}
  function gbranch?    { git branch --show-current                  "$@" ;}
  function gcheckout   { git checkout                               "$@" ;}
  function gcherrypick { git cherry-pick                            "$@" ;}
  function gconfig     { git config                                 "$@" ;}
  function gclone      { git clone                                  "$@" ;}
  function gcommit     { git commit                                 "$@" ;}
  function gdiff       { git diff                                   "$@" ;}
  function gfetch      { git fetch                                  "$@" ;}
  function ginit       { git init                                   "$@" ;}
  function gmerge      { git merge --no-ff                          "$@" ;}
  function gmove       { git mv                                     "$@" ;}
  function gmv         { git mv                                     "$@" ;}
  function gpatch      { git apply                                  "$@" ;}
  function gpop        { git stash pop                              "$@" ;}
  function gpull       { git pull                                   "$@" ;}
  function gpush       { git push                                   "$@" ;}
  function grebase     { git rebase                                 "$@" ;}
  function gremote     { git remote                                 "$@" ;}
  function greset      { git reset                                  "$@" ;}
  function gstage      { git add                                    "$@" ;}
  function gstash      { git stash                                  "$@" ;}
  function gstatus     { git status --short --branch --ahead-behind "$@" ;}
  function gtag        { git tag                                    "$@" ;}
  function gtrack      { git add                                    "$@" ;}
  function gunchange   { git checkout HEAD                          "$@" ;}
  function gundelete   { git checkout HEAD                          "$@" ;}
  function gunstage    { git reset                                  "$@" ;}
  function guntrack    { git rm -r --cached                         "$@" ;}

  function glog        { git log --color='always' "$@" | bat ;}
  function ggraph      { glog --oneline --decorate --graph "$@" ;}

  function gdeploy {
    # Deploys to the given remote (defaults to 'production').
    # Prompts for confirmation (y/N) before pushing to target.

    [ "$1" == '--help' ] && echo 'Usage: gdeploy [REMOTE_NAME]' && return 0

    local remote="${1:-production}"
    local branch="$( gbranch --show-current )"

    gremote 2> /dev/null | has-line? "$remote" || return 1

    local confirmation
    printf 'Deploy branch "\e[33;1m%s\e[0m" to remote "\e[31;1m%s\e[0m"? (y/N) ' "$branch" "$remote"; read -r confirmation
    [ "$( tr '[:upper:]' '[:lower:]' <<< "$confirmation" )" == 'y' ] || return 2

    ding-if-slow gpush --force "$remote" "${branch}:main"
  }


  # grep

  function grep { "$( real grep )" -P --color=auto "$@" ;}


  # heroku

  function k { heroku "$@" ;}

  # Disable telemetry reporting.
  #
  export DISABLE_TELEMETRY='true'


  # lazydocker

  function lazydocker {
    command -v docker &> /dev/null || sudo apt install -qqy docker.io
    "$( real lazydocker )" "$@"
  }


  # less

  # Allow use of `less` with non-plaintext data.
  # (See `lesspipe` manpage for additional info.)
  #
  eval "$( lesspipe )"

  # `less` (and pager use in general) should allow
  # "smart case" searches, pass color codes through
  # without mangling, and never ring the terminal bell.
  #
  export LESS='--ignore-case --raw-control-chars --silent'

  # Set sensible default when manually invoked from a shell.
  #
  function less {
    "$( real less )" --LINE-NUMBERS --chop-long-lines                  \
                     --LONG-PROMPT --shift='1' --quit-if-one-screen "$@"
  }


  # ls

  # Colorize `ls` output by file class/type.
  #
  eval "$( dircolors )"


  # pgcli

  function pgcli { "$( real pgcli )" --pgclirc="${HOME}/.config/pgcli/config" "$@" ;}


  # rg

  function rg { "$( real rg )" --engine="pcre2" --color=auto --follow "$@" ;}


  # ... shellcheck (this comment can't look like a Shellcheck directive)

  # `shellcheck` is a bit of a pain to use on directories that
  # include both executable scripts and data files, as it generates
  # a ton of false positive warnings for the non-script files. This
  # shim filters non-files and non-executables out of the parameter
  # list.

  function shellcheck {
    declare -a args=("$@")
    declare -a executables

    for (( i=0; i < "${#args[*]}"; i++ )); do
      # We only want to run our sanity checks on non-option arguments.
      # Anything that begins with a '-' gets passed through unlatered.

      if [ "$( head -c1 <<< "${args[$i]}" )" != '-' ]; then
        [ -f "${args[$i]}" ] || continue  # Only keep files.
        [ -x "${args[$i]}" ] || starts-with? '#!' < "${args[$i]}" || continue  # Only keep script-likes.
      fi

      executables+=("${args[$i]}")
    done

    "$( real shellcheck )" "${executables[@]}"
  }


  # tree

  function list { tree -lR --dirsfirst --sort=version "$@" ;}


# ---


# Set the prompt.
#
prompt_setter="${HOME}/bin/set-prompt.src"
[ -r "$prompt_setter" ] && source "$prompt_setter"


# Load command completion data.
#
completion_loader='/usr/share/bash-completion/bash_completion'
[ -r "$completion_loader" ] && source "$completion_loader"


# Load additional VM-specific customizations.
#
vm_customization_home="${HOME}/vm-scripts/$( hostname )"
if [ -d "$vm_customization_home" ]; then
  export PATH="${vm_customization_home}/bin:${PATH}"

  vm_customization_file="${vm_customization_home}/custom-shell"
  [ -r "$vm_customization_file" ] && source "$vm_customization_file"
fi


# Load Dev-specific tooling (ENV/language helpers).
#
export DEV_ROOT="${HOME}/dev"
dev_helpers="${HOME}/bin/dev.src"
[ -r "$dev_helpers" ] && source "$dev_helpers"


# Ensure all of the above-defined functions are usable in subshells as well.
#
export -f ... .... ..... ::                                                              \
          a break-out-of-links f g gadd gblame gbranch gbranch? gcheckout gcherrypick    \
          gclone gcommit gconfig gdeploy gdiff gfetch ggraph ginit glog gmerge gmove gmv \
          gpatch gpop gpull gpush grebase gremote grep greset gstage gstash gstatus gtag \
          gtrack gunchange gundelete gunstage guntrack h hbat helix k lazydocker less    \
          list m mirror mkcd pgcli real rg shellcheck


# New windows/panes opened from within a symlinked location will show up within "~/links",
# so we're breaking out of those by default on new shells to avoid having to do it manually.
#
break-out-of-links


true  # Never start a shell with a non-0 status on the prompt.
