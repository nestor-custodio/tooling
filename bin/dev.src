#! /bin/env bash
shopt -s lastpipe expand_aliases

# ---

# Lookup helpers.

  function dev {
    # Fuzzy-find-based dev location utility.
    # - If no search term is given, `cd` into the dev root.
    # - If a single match is found, `cd` into it or open it into the editor, as applicable.
    # - If multiple matches are found, allow interactive selection and then process as above.

    local search="$1" && shift
    local dev_root="${DEV_ROOT:-${HOME}/dev}"


    # We want to be at $dev_root before the editor runs
    # so file searches, etc are project-wide by default.
    #
    cd "$dev_root"


    # Simpleton case: no params given.
    #
    [ "$search" == '' ] && return 0


    # Compile list of all *possible* entries.
    #
    local directories_only list
    [ "${search: -1}" == '/' ] && directories_only="--type=d"
    list="$( fd "$directories_only" --hidden --exclude='.git/' --color='always' )"

    # Find *matching* entries, asking interactively if necessary.
    #
    readarray -t matches < <( fzf --query="'${search} " --multi --select-1 --preview-window='default' <<< "$list" )


    # Process matches...
    #
    case "${#matches[*]}" in
      0)
        return 1
        ;;

      1)
        local match="${matches[0]}"
        case "$( file-class --follow "$match" )" in
          d) cd "./${match%/}" ;;
          r) "$EDITOR" -- "$match" ;;
        
          *)
            echo 'unexpected file class'
            return 1
            ;;
        esac
        ;;

      *)
        for (( i=0; i < "${#matches[*]}"; i++ )); do
          [ "$( file-class --follow "${matches[$i]}" )" == 'r' ] || return 1
        done

        "$EDITOR" -- "${matches[@]}"
        ;;
    esac
  }

  alias ::='dev'


# Language helpers.

  # ruby

    # Executable management.
    #
    source "${HOME}/bin/vendor/chruby-source"
    source "${HOME}/bin/vendor/chruby-source.auto"

    # Linting/Style tooling.
    #
    export RUBOCOP_OPTS="--server --format='simple' --format='offenses' --color"
    #
    function _rubocop_runner {
      local runner=''
      nearest --read 'Gemfile.lock' 'Gemfile' | has 'rubocop' && runner='bundle exec rubocop'
      [ -z "$runner" ] && { which rubocop || gem install rubocop ; } &> /dev/null && runner="$( which rubocop )"
      #
      echo "$runner"
    }
    #
    # shellcheck disable=SC2046
    function rubocop { $( _rubocop_runner ) "$@"; }
    # shellcheck disable=SC2046
    function rubowatch {
      local watch_interval
      [ -n "$1" ] && [ -z "${1//[0-9.]/}" ] && watch_interval="$1" && shift
      watch --color --interval="${watch_interval:-10}" $( _rubocop_runner ) "$@"
    }

    # Test re-run helper.
    #
    function tddwatch {
      local watch_interval
      [ -n "$1" ] && [ -z "${1//[0-9.]/}" ] && watch_interval="$1" && shift
      tdd "$@"; fswatch -or "${HOME}/dev" --event='Updated' --latency="${watch_interval:-5}" | xargs -i tdd "$@"
    }
      
    # Bundle/Gemfile management.
    #
    alias bx='bundle exec'
    alias br='bundle exec'
    #
    alias ba='(                                    \
                gem list bundler-audit --installed \
                ||                                 \
                gem install bundler-audit          \
              ) &> /dev/null                       \
              &&                                   \
              bundle-audit check --update'
    #
    alias bi='nearest --quiet "Gemfile.lock" "Gemfile" && bundle install --jobs=$( nproc )'
    alias bi\!='nearest --quiet "Gemfile.lock" "Gemfile"                                  \
                &&                                                                        \
                (                                                                         \
                  (                                                                       \
                    ruby_version="$( nearest --read ".ruby-version" )"                    \
                    &&                                                                    \
                    (                                                                     \
                      (                                                                   \
                        command -v ruby                                                   \
                        &&                                                                \
                        ruby --version | has "$ruby_version"                              \
                      )                                                                   \
                      ||                                                                  \
                      chruby "$ruby_version"                                              \
                      ||                                                                  \
                      (                                                                   \
                        ruby-install "$ruby_version"                                      \
                        &&                                                                \
                        source "${HOME}/bin/vendor/chruby-source"                         \
                        &&                                                                \
                        chruby "$ruby_version"                                            \
                      )                                                                   \
                    )                                                                     \
                  )                                                                       \
                  ||                                                                      \
                  chruby ruby                                                             \
                ) &> /dev/null                                                            \
                &&                                                                        \
                (                                                                         \
                  (                                                                       \
                    lockfile="$( nearest "Gemfile.lock" )"                                \
                    &&                                                                    \
                    bundler_version="$( tail -n1 "$lockfile" | tr -d " " )"               \
                    &&                                                                    \
                    (                                                                     \
                      gem list bundler --installed --version="$bundler_version"           \
                      ||                                                                  \
                      gem install "bundler:${bundler_version}"                            \
                    )                                                                     \
                  )                                                                       \
                  ||                                                                      \
                  (                                                                       \
                    gem list bundler --installed                                          \
                    ||                                                                    \
                    gem install bundler                                                   \
                  )                                                                       \
                ) &> /dev/null                                                            \
                &&                                                                        \
                bundle install --jobs=$( nproc )'

  # rails

    alias rc='bundle exec rails console'
    alias rs='bundle exec rails server'
    alias rs1='RAILS_MAX_THREADS=1 WEB_CONCURRENCY=1 bundle exec rails server'

    alias db:='bundle exec rails generate migration'
    alias db+='bundle exec rails db:migrate'
    alias db-='bundle exec rails db:rollback'
    alias db\!="bundle exec rails runner 'require %(bundler/inline); gemfile { source %(https://rubygems.org); gem %(lazy_migrate) }; LazyMigrate.run'"
    alias DB\!='gem update sorbet-runtime &> /dev/null; gem cleanup sorbet-runtime &> /dev/null; db!'

    function rails-tasks { nearest --quiet 'Gemfile' && bundle exec rails --tasks="$1" --all; }
    alias rt='rails-tasks'


  # node

    # Executable management.
    #
    export N_PREFIX="${HOME}/.nodes"

    # Package helpers.
    #
    alias nx='npx'
    alias na='npm audit'
    alias ni='npm install'

    # Command helpers.
    #
    alias nr='npm run'
    alias ns='npm run start'
    #
    function node-tasks {
      local lookup="$1" && shift
      [ -z "$lookup" ] && lookup='^' || lookup='^.*'"$lookup"'.*$'
      nearest --quiet 'package.json' && npm run | grep -P "$lookup" --context='1000' --color='always'
    }
    alias nt='node-tasks'


  # yarn

    # Package helpers.
    #
    alias yx='yarn'
    alias yr='yarn'
    #
    alias ya='yarn audit'
    #
    alias yi='nearest --quiet "package.json" "yarn.lock" && yarn install 2> /dev/null'
    alias yi\!='nearest --quiet "package.json" "yarn.lock"                           \
                &&                                                                   \
                (                                                                    \
                  (                                                                  \
                    node_version="$( nearest --read ".node-version" )"               \
                    &&                                                               \
                    (                                                                \
                      (                                                              \
                        command -v node                                              \
                        &&                                                           \
                        node --version | has "$node_version"                         \
                      )                                                              \
                      ||                                                             \
                      n install "$node_version"                                      \
                    )                                                                \
                  )                                                                  \
                  ||                                                                 \
                  (                                                                  \
                    command -v node                                                  \
                    ||                                                               \
                    n lts                                                            \
                  )                                                                  \
                ) &> /dev/null                                                       \
                &&                                                                   \
                (                                                                    \
                  command -v yarn                                                    \
                  ||                                                                 \
                  npm install -g yarn                                                \
                ) &> /dev/null                                                       \
                &&                                                                   \
                yarn install 2> /dev/null'


  # multi-language constructs

    alias @='bi!; yi!'


# ENV helpers.
# Note we want to define this stuff last so when we store the starting ("clean") list
# of ENV vars (as "${ENV_VARS[clean]}") it includes all of the variables defined above.

  function known-env-vars { export -p | sed -r -e 's|=.*$||' -e 's|^.* ||' | sort ; }
  declare -Ax ENV_VARS; ENV_VARS[clean]="$( known-env-vars )"

  function set-env {
    local env_name="$1" && shift
    [ -n "$env_name" ] || return

    export RUBY_ENV="$env_name"
    export RAILS_ENV="$env_name"
    export RACK_ENV="$env_name"
    export NODE_ENV="$env_name"
  }

  function load-env {
    local env_name="$1" && shift
    declare -a env_list=('.env' '.env.local')
    [ -n "$env_name" ] && env_list+=(".env.${env_name}" ".env.${env_name}.local")

    unload-env
    set-env "$env_name"
    for env_file in "${env_list[@]}"; do source "${HOME}/dev/${env_file}" 2> /dev/null; done
  }

  function unload-env {
    local clean_vars_file="$( mktemp --dry-run -t 'unload-env.XXX' )"
    echo -n "${ENV_VARS[clean]}" > "$clean_vars_file"

    for new_env_var in $( known-env-vars | fgrep -vx --file="$clean_vars_file" ); do unset "$new_env_var"; done
    rm "$clean_vars_file"
  }

  # ---

  alias development="set-env 'development' ;" 
  alias testing="set-env 'test' ;"
  alias staging="set-env 'staging' ;"
  alias production="set-env 'production' ;"

  alias d='development' 
  alias t='test'
  alias s='staging'
  alias p='production'

  # Default to "development".
  #
  set-env 'development'
