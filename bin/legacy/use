#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) ruby [VERSION]
		       $( script-name ) node [VERSION]

		Sets the Ruby/Node snap channel to that of the given version.

		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.

		Exit status:
		  0  if OK,
		  1  if invalid option,
		  2  if unable to install target program,
		  3  if given version is not installable.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS='h'
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(-h|--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	program="$1" && shift
	[ -n "$program" ] || error-out 1 'no program given'

	version="$1" && shift
	[ -n "$version" ] || error-out 1 'no VERSION given'


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---

install-snap() {
	cat <<-EOF | store-as usage
		Usage: ${0} SNAP_NAME [INSTALL_OPTIONS]

		Ensures a snap is installed and enabled.

		Any INSTALL_OPTIONS given are used only if the snap is not available and requires installation,
		in which case they are passed through to 'snap install' as-is.
	EOF


	# Parse options and normalize flags/parameters.
	#
	local snap_name="${1:?${usage}}" && shift

	# ---
	# ---

	# Install the snap if necessary.
	#
	snap list "$snap_name" > /dev/null 2>& 1 \
	|| sudo snap install "$snap_name" "$@" 2> /dev/null && return 0


	error-out 2 "[!] Unable to install snap \"${snap_name}\"."
}

set-snap-channel() {
	cat <<-EOF | store-as usage
		Usage: ${0} SNAP_NAME REQUESTED_CHANNEL

		Ensures a snap is on the proper release channel.
	EOF


	# Parse options and normalize flags/parameters.
	#
	local snap_name="${1:?${usage}}" && shift
	local requested_channel="${1:?${usage}}" && shift

	# ---
	# ---

	local loaded_channel="$( use.loaded "$snap_name" )"
	local available_channels="$( use.versions "$snap_name" )"


	[ "$requested_channel" == "$loaded_channel" ] && return 0

	fgrep --quiet -x "$requested_channel" <<< "$available_channels" \
	&& sudo snap refresh "$snap_name" --channel="$requested_channel" 2> /dev/null && return 0


	error-out 3 "[!] Unable to set the \"${snap_name}\" snap to versioned channel \"${requested_channel}\"."
}

set-up-versioned-storage() {
	cat <<-EOF | store-as usage
		Usage: ${0} PROGRAM VERSION LINKED_AS

		Creates a storage location for the given program and version, and links to it as "linked_as".
	EOF


	# Parse options and normalize flags/parameters.
	#
	local program="${1:?${usage}}" && shift
	local version="${1:?${usage}}" && shift
	local linked_as="${1:?${usage}}" && shift

	# ---
	# ---

	local target_location="${HOME}/snap/${program}/versioned-storage/${version}"

	[ ! -e "$target_location" ] || [ ! -e "$linked_as" ] \
	|| [ "$( realpath "$target_location" )" != "$( realpath "$linked_as" )" ] && {
		rm -rf "$linked_as"
		mkdir -p "$target_location"
		ln -sT "$target_location" "$linked_as"
	}


	return 0
}

# ---
# ---


case "$program" in

	(ruby)
		channel="$( sed -r -e '/^[0-9]+\.[0-9]+/ !d' -e 's|^([0-9]+\.[0-9]+).*$|\1|' <<< "${version}.0" )"
		[ -n "$channel" ] || error-out 3 'invalid VERSION'

		install-snap ruby --classic --channel="$channel"
		set-snap-channel ruby "$channel"
		set-up-versioned-storage ruby "${channel}" "${HOME}/.gem"
		;;

	(node)
		channel="$( sed -r -e '/^v?[0-9]+/ !d' -e 's|^v?([0-9]+).*$|\1|' <<< "$version" )"
		[ -n "$channel" ] || error-out 3 'invalid VERSION'

		install-snap node --classic --channel="$channel"
		set-snap-channel node "$channel"
		;;

	*) error-out 1 "unknown PROGRAM (${program})" ;;
esac
