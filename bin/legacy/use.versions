#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) SNAP_NAME

		Reports all available stable channels for the given snap.

		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.

		Exit status:
		  0  if OK,
		  1  if invalid option.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS='h'
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(-h|--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	snap_name="$1" && shift
	[ -n "$snap_name" ] || error-out 1 'no SNAP_NAME given'


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---

version-file() {
  local snap_name="$1" && shift
  [ -n "$snap_name" ] || return 1

  echo "$( dirname "$0" )/use.versions:${snap_name}"
}

refresh-version-file() {
  local snap_name="$1" && shift
  [ -n "$snap_name" ] || return 1

  snap info "$snap_name"                                                                                \
  | yaml '.channels | keys | map(select(test("^[^ ]+/stable"))) | map(sub("/stable"; "")) | join("\n")' \
  | tee "$( version-file "$snap_name" )"
}

# ---
# ---


max_usable_file_age='43200'  # 12 Hours

age="$( file-age "$( version-file "$snap_name" )" 2> /dev/null )"
if [ -n "$age" ] && [ "$age" -lt "$max_usable_file_age" ]; then
  cat "$( version-file "$snap_name" )"
else
  refresh-version-file "$snap_name"
fi
