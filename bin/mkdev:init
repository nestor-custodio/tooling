#! /bin/bash
shopt -s lastpipe

# ---
# ---


PATH=".:/home/nestor/bin:/home/nestor/bin/vendor:/snap/bin:$PATH"

init_log='/var/log/init'
startup_log='/var/log/startup'


# ---
# ---


# -- INIT -- #
[ -e "$init_log" ] || {

	report() {
		local report="$1" && shift
		echo -e "\n\n------------------------------------------------------------------------\n@ $( date '+%s' ): ${report}\n"
	}

	# ---

	metadata() {
		local metadata_key="$1" && shift

		# Set the GCP Metadata API's base URI.
		# (https://cloud.google.com/compute/docs/storing-retrieving-metadata)
		#
		local gcp_metadata_api='http://metadata.google.internal/computeMetadata/v1'


		# We're tacking on an `echo` because the metadata response is "too clean" (i.e. has no "\n").
		#
		curl "${gcp_metadata_api}/${metadata_key}" --silent --header 'Metadata-Flavor: Google' --fail && echo
	}

	project() {
		local metadata_key="$1" && shift
		metadata "project/${metadata_key}"
	}

	instance() {
		local metadata_key="$1" && shift
		metadata "instance/${metadata_key}"
	}

	# ---
	# ---

	{ # -- Global PRE Config -- #

		# Add user account.
		report 'adding user account'

			adduser nestor                    \
			        --disabled-password       \
			        --gecos='Nestor Custodio'


		# Set system behaviours.
		report 'setting system behaviours'

			# Set timezone ...
			timedatectl set-timezone 'America/Chicago'

			# Silence all MOTD text ...
			chmod a-x /etc/update-motd.d/*

			# Set sudo password appearance ...
			echo 'Defaults pwfeedback' >> /etc/sudoers

			# Increase inotify watcher count ...
			echo 'fs.inotify.max_user_watches=524288' >> /etc/sysctl.conf && sysctl -p

			# Facilitate future Docker usage (avoid socket access error)...
			addgroup --quiet        docker
			adduser  --quiet nestor docker

			# Set "/etc/hosts" ownership so we can use `hostctl` without `sudo` ...
			chown nestor:nestor /etc/hosts

			# Prevent apt-get from hanging on "unable to initialize front" errors ...
			debconf-set-selections <<< 'debconf debconf/frontend select noninteractive'


		# Install global packages.
		report 'installing global packages'

			apt-get -qq update
			apt-get -qqy install ansifilter        \
			                     asciinema         \
			                     build-essential   \
			                     byobu             \
			                     curl              \
			                     git               \
			                     nfs-common        \
			                     qrencode          \
			                     tree              \
			                     wget              \
			                     zip unzip

			snap install --devmode dotdrop 2> /dev/null

	}

	# ---
	# ---

	{ # -- NFS Mounts -- #

		# Set up NFS mount for "docs" and "links".
		report 'setting up NFS mount for "docs" and "links"'

			cat <<-'EOF' >> /etc/fstab
				sync:/docs  /home/nestor/docs  nfs _netdev,auto,fg 0 0
				sync:/links /home/nestor/links nfs _netdev,auto,fg 0 0
			EOF

			sudo --user='nestor' mkdir /home/nestor/docs /home/nestor/links && mount -a
			sudo --user='nestor' dotdrop --cfg='/home/nestor/links/dotdrop-config.yaml' --profile='global' install --force

	}

	# ---

	{ # -- Development Setup -- #

		# Install additional dev tooling.
		report 'installing additional dev tooling'

			apt-get -qqy install litecli mycli pgcli postgresql-client s3fs  # Additional dev tooling.
			apt-get -qqy install libmysqlclient-dev libpq-dev libsqlclient-dev libsqlite3-dev  # So we can build Ruby/Rails db gems.


		# Prepare "~/dev".
		report 'preparing ~/dev'

			dev_root='/home/nestor/dev'
			sudo --user='nestor' mkdir "$dev_root"

			dev_dir="$( instance attributes/dev-dir )"
			git_repo="$( instance attributes/git-repo )"


			# Set up the sync-persisted store, if needed.
			{ [ -n "$dev_dir" ] || [ -n "$git_repo" ] ; } && {

				# Make sure the remote store exists.

				report '... creating dev dir on sync'

				[ -n "$git_repo" ] && {

					# Transform repo URLs:
					# - "git@github.com:username/repo.git"     => "github.com/username/repo"
					# - "https://github.com/username/repo.git" => "github.com/username/repo"

					dev_dir="$( sed -r -e 's#^.*://##' -e 's#^.*@##' -e 's#:#/#' -e 's#\.git$##' <<< "$git_repo" )"
				
				}

				dev_remote_path="/export/dev/${dev_dir}/"
				sudo --user='nestor' ssh sync "mkdir -p '${dev_remote_path}'" &> /dev/null


				# Mount the persisted store into the dev root.
				
				report '... mounting dev dir from sync'

				dev_mount_path="sync:/dev/${dev_dir}"
				echo "${dev_mount_path}  ${dev_root}  nfs _netdev,auto,fg 0 0" >> /etc/fstab && mount -a


				# Clone the given git_repo if needed.

				[ -n "$git_repo" ] && ! [ -d "${dev_root}/.git" ] && {
					report '... cloning repo (--no-checkout) into dev root'
					sudo --user='nestor' git clone "$git_repo" "$dev_root" --no-checkout
				}

			}

	}

	# ---
	# ---

	{ # -- Global POST Config -- #

		# Install additional dependencies.
		report 'installing additional dependencies'

			global_installers="/home/nestor/bin/installers"
			ls "$global_installers"/*.deb &> /dev/null && apt install "$global_installers"/*.deb > /dev/null

			vm_specific_installers="/home/nestor/vm-scripts/$( instance name )/installers"
			ls "$vm_specific_installers"/*.deb &> /dev/null && apt install "$vm_specific_installers"/*.deb > /dev/null

			apt-get -qqy install -f  # Resolve possible dependency issues.


		# Notify of init completion.
		report 'notifying of init completion'

			cat <<-EOF | read -r -d '' notification
				Hostname: $( hostname )
				External: $( wan-ip )
				Disk Use: $( df -h / --output='pcent,size,avail'                         \
				             | sed -r -e '1 d'                                           \
				                      -e 's# +#:#g'                                      \
				                      -e 's#^:?(.*):(.*):(.*)$#\1 of \2 (\3 Available)#' )

				Ready In: $( elapsed --since="@$( instance attributes/created-at )" )
			EOF
			notify gcp "VM Ready: $( instance name )" "$notification"


	  echo -e "\n\n... Init complete in $( puptime )."

	}

} > "$init_log" 2>&1


# ---
# ---


{ # -- STARTUP -- #

	# Create relevant DNS entries.

		expose-vm

} > "$startup_log" 2>&1
