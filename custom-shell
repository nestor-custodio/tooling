#! /bin/bash
shopt -s lastpipe

# ---

# Set shell niceties.
#
shopt -s autocd checkwinsize globstar interactive_comments lastpipe no_empty_cmd_completion sourcepath


# Executable search order should be: - the current directory
#                                    - "${HOME}/bin"
#                                    - "${HOME}/bin/vendor"
#                                    - "${HOME}/.nodes/bin"
#                                    - "${HOME}/.yarn/bin"
#                                    - snap packages
#                                    - native packages
#                                    - the current directory's "./bin"
#
export PATH=".:${HOME}/bin:${HOME}/bin/vendor:${HOME}/.nodes/bin:${HOME}/.yarn/bin:/snap/bin:$PATH:./bin"


# Explicitly set our language and sorting collation of choice.
#
export LANG=en_US.UTF-8
export LC_COLLATE=en_US.UTF-8


# Explicitly set our $EDITOR of choice.
#
export EDITOR="$( cd && command -v hx )"
alias helix='$EDITOR'
alias :='$EDITOR'
alias :?='$EDITOR .'


# Postgres should connect to host "postgres" by default.
# (https://www.postgresql.org/docs/current/libpq-envars.html)
#
export PGHOST='postgres'




# Set sensible tooling defaults and shortcuts.

  # bat

  # It's nice to have a 1-char name for something
  # that will properly page/colorize man/help text.
  #
  m() { man "$@" | bat --plain --language='man' ; }
  h() { "$@" --help | bat --plain --language='help' ; }


  # cd

  # Make it easier to `cd` into common locations.
  #
  export CDPATH=".:${HOME}"


  # dotdrop

  # Ensure `dotdrop` can find its config file.
  #
  export DOTDROP_CONFIG="${HOME}/links/dotdrop-config.yaml"

  # All hosts share the same `dotdrop` profile.
  #
  export DOTDROP_PROFILE='global'


  # eget

  # Make sure `eget` knows where to download binaries to
  # *and* knows where to look for existing binaries when
  # determining timestamps for `--upgrade-only` purposes.
  #
  export EGET_BIN="${HOME}/bin/vendor"


  # fzf

  fzf_keybinding_spec="ctrl-i:up,ctrl-k:down,space:toggle,ctrl-space:toggle"

  fzf_preview_command="file --brief --mime-type -- {} | starts-with 'text/'   \
                       && bat --force-colorization --line-range='1:200' -- {} \
                       || echo '(non-text content)'"

  export FZF_DEFAULT_COMMAND="fd --hidden --exclude='.git/' --color='always'"
  export FZF_DEFAULT_OPTS="--ansi                               \
                           --cycle                              \
                           --header=''                          \
                           --info='inline'                      \
                           --keep-right                         \
                           --layout='reverse'                   \
                                                                \
                           --bind='${fzf_keybinding_spec}'      \
                                                                \
                           --preview-window='hidden'            \
                           --preview=\"${fzf_preview_command}\" "


  # git / lazygit

  alias g='lazygit'

  alias gadd='git add'
  alias gblame='git blame -w --minimal --color-by-age'
  alias gbranch='git branch'
  alias gcheckout='git checkout'
  alias gcherrypick='git cherry-pick'
  alias gconfig='git config'
  alias gclone='git clone'
  alias gcommit='git commit'
  alias gdelete='git rm -r'
  alias gdiff='git diff'
  alias gfetch='git fetch'
  alias ggraph='git log --oneline --decorate --graph'
  alias ginit='git init'
  alias glog='git log'
  alias gmerge='git merge --no-ff'
  alias gmove='git mv'
  alias gmv='git mv'
  alias gpatch='git apply'
  alias gpop='git stash pop'
  alias gpull='git pull'
  alias gpush='git push'
  alias grebase='git rebase'
  alias gremote='git remote'
  alias gremove='git rm -r'
  alias greset='git reset'
  alias grm='git rm -r'
  alias gstage='git add'
  alias gstash='git stash'
  alias gstatus='git status'
  alias gtag='git tag'
  alias gtrack='git add'
  alias gunchange='git checkout HEAD'
  alias gundelete='git checkout HEAD'
  alias gunstage='git reset'
  alias guntrack='git rm -r --cached'


  # grep

  alias grep='/bin/grep -P --color=auto'


  # heroku

  alias k='heroku'


  # lazydocker

  lazydocker() {
    command -v docker &> /dev/null || sudo apt install -qqy docker.io

    # We don't want the function name back, so `which` is a must.
    # shellcheck disable=SC2230
    #
    sudo "$( which lazydocker )" "$@"
  }


  # less

  alias less='less --quit-if-one-screen --LONG-PROMPT --LINE-NUMBERS --RAW-CONTROL-CHARS --silent --chop-long-lines --shift=1'


  # ls

  alias ls="/bin/ls -ohH --group-directories-first --time-style=long-iso --color=auto --quoting-style=literal $( sed -r -e 's|(.*)|--hide="\1"|' < ~/.hidden | tr "\n" ' ' )"
  alias la='/bin/ls -ohH --group-directories-first --time-style=long-iso --color=auto --quoting-style=literal --almost-all'


  # pgcli

  alias pgcli='pgcli --pgclirc="~/.config/pgcli/config"'


  # rg

  alias rg='rg --engine="pcre2" --color=auto --follow'


  # shellcheck

  # `shellcheck` is a bit of a pain to use on directories that
  # include both executable scripts and data files, as it generates
  # a ton of false positive warnings for the non-script files. This
  # shim filters non-files and non-executables out of the parameter
  # list.

  shellcheck() {
    declare -a args=("$@")
    declare -a executables

    for (( i=0; i < "${#args[*]}"; i++ )); do
      # We only want to run our sanity checks on non-option arguments.
      # Anything that begins with a '-' gets passed through unlatered.

      if [ "$( head -c1 <<< "${args[$i]}" )" != '-' ]; then
        [ -d "${args[$i]}" ] && continue  # Skip directories.
        [ -x "${args[$i]}" ] || continue  # Only keep executables.
        head -n1 "${args[$i]}" | has '#!' || continue  # Only keep shebang'ed files.
      fi

      executables+=("${args[$i]}")
    done

    # We don't want the function name back, so `which` is a must.
    # shellcheck disable=SC2230
    #
    "$( which shellcheck )" "${executables[@]}"
  }


  # tree

  alias list='tree -lR --dirsfirst --sort=version'


  # watch

  # `watch` can't be used with aliases, so we need to turn *it*
  # into an alias (with continued expansion by ending with a space).
  # (https://unix.stackexchange.com/questions/25327/watch-command-alias-expansion)

  alias watch='/bin/watch --color '
  alias watch-1='/bin/watch --color --interval=1 '
  alias watch-2='/bin/watch --color --interval=2 '
  alias watch-3='/bin/watch --color --interval=3 '
  alias watch-5='/bin/watch --color --interval=5 '
  alias watch-10='/bin/watch --color --interval=10 '




# Filesystem manipulation niceties.

alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias md='mkdir'
alias rd='rmdir'
mkcd() { mkdir -p "$1" && cd "$1"; }

alias mirror='rsync --recursive --whole-file --delete-during --force --verbose --links --perms --executability --times'

break_out_of_links() {
  local pwd="$( pwd -P )"
  local link_root="${HOME}/links/"
  starts-with "$link_root" <<< "$pwd" && cd "$( sed -e "s|${link_root}|/|" <<< "$pwd" )"
}
alias %='break_out_of_links'




# Dev tooling.

export DEV_ROOT="${HOME}/dev"

dev_helpers="${HOME}/bin/dev.src"
[ -r "$dev_helpers" ] && source "$dev_helpers"




# Set the prompt.
#
prompt_setter="${HOME}/bin/prompt.src"
[ -r "$prompt_setter" ] && source "$prompt_setter"


# Load additional VM-specific customizations.
#
vm_customization_file="${HOME}/vm-scripts/$( hostname )/custom-shell"
[ -r "$vm_customization_file" ] && source "$vm_customization_file"


# New windows/panes opened from within a symlinked location will show up within ~/links,
# so we're breaking out of those by default on new shells to avoid having to do it manually.
#
break_out_of_links


true  # Never start a shell with a non-0 status on the prompt.
