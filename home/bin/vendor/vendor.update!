#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) TOOL_NAME
		       $( name-blanks ) --checks-only

		Makes a best-effort attempt to update the corresponding binary.
		If the TOOL_NAME is "all", all vendor tooling will be updated as needed.


		Mandatory arguments to long options are mandatory for short options too.
		  --checks-only             Only run the version checks; no downloads.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option,
		  2  if fetch-related error.
	EOF

}

# ---

{ # -- Constants -- #

	TEMPFILE_TEMPLATE='vendor-bin-updater.XXX'

}

# ---

{ # -- Utility Functions -- #

	_executable=''
	function executable {
		[ -n "$_executable" ] && echo "$_executable" && return
	
		store-as _executable <<< "${HOME}/bin/vendor/${tool_name}"
		echo "$_executable"
	}

	_github_repo=''
	function github-repo {
		[ -n "$_github_repo" ] && echo "$_github_repo" && return
	
		store-as _github_repo < "$( executable ).repo"
		echo "$_github_repo"
	}

	_executable_url=''
	function executable-url {
		[ -n "$_executable_url" ] && echo "$_executable_url" && return
	
		store-as _executable_url < "$( executable ).url"
		echo "$_executable_url"
	}

	# ---
	
	function update-tooling {

		# Arguments/options passed into this will be passed through to the
		# underlying `eget` call. Most useful for `--asset`, `--source`, etc.

		# ---

		eget --quiet "$( github-repo )" "$@" --to="$( executable )" || error-out 2
		chmod 755 "$( executable )"

	}

	# ---

	function update-deb-tooling {

		# Arguments/options passed into this will be passed through to the
		# underlying `eget` call. Most useful for `--asset`, `--source`, etc.

		# ---

		mktemp --tmpdir --directory "$TEMPFILE_TEMPLATE" | store-as extract_dir
		eget --quiet "$( github-repo )" --asset='.deb' "$@" --to='/dev/stdout' | dpkg --extract '/dev/stdin' "$extract_dir"
		mv "${extract_dir}/usr/bin/${tool_name}" "$( executable )" &> /dev/null || error-out 2 'unable to fetch/find binary'
		chmod 755 "$( executable )"
		rm -rf "$extract_dir"

	}

}

# ---

{ # -- Parameter Processing: Options -- #

	# Set defaults.

	checks_only=''

	# ---
	# ---

	CHAR_OPTS=''
	LONG_OPTS='help,checks,checks-only'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.

			(--checks|--checks-only)
				checks_only='1'
				;;
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	tool_name="$1" && shift


	[ "$#" == 0 ] || error-out 1 'invalid option(s)'

}

# ---
# ---


# Sanity check: we need *exactly one* of TOOL_NAME and --checks-only
#
[ -z "$tool_name" ] && [ -z "$checks_only" ] && error-out 1 'no TOOL_NAME given'
[ -n "$tool_name" ] && [ -n "$checks_only" ] && error-out 1 'cannot specify both a TOOL_NAME and --checks-only'


# Process --checks-only request.
#
if [ -n "$checks_only" ]; then

	ls -1 --literal "${HOME}/bin/vendor"/*.repo | while read -r repo_file; do
		superbase "$repo_file" | store-as tool_name

		printf "\e[1m%s\e[0m: ..." "$tool_name"
		vendor.latest? "$tool_name" | store-as update_report
		[ -z "$update_report" ] && clear-line && continue

		backspace 3 && echo "$update_report"
	done

fi


# Process tool update request.
#
case "$tool_name" in


	# The "update all" case.

	(all)
		ls -1 --literal "${HOME}/bin/vendor"/*.repo | while read -r repo_file; do
			superbase "$repo_file" | store-as tool_name

			printf "\e[1m%s\e[0m: ..." "$tool_name"
			vendor.latest? "$tool_name" | store-as update_report
			[ -z "$update_report" ] && clear-line && continue

			backspace 3
			echo -n "${update_report} ..."
			if vendor.update! "$tool_name"
				then backspace 3 && printf "\e[32;1m%s\e[0m\n" "âœ”"
				else backspace 3 && printf "\e[31;1m%s\e[0m\n" "x"
			fi
		done
		;;


	# Straight-forward `eget` pulls.

	(bat              ) update-tooling --asset='gnu'                     ;;
	(btop             ) update-tooling                                   ;;
	(bw               ) update-tooling --asset='.zip' --tag='cli'        ;;
	(caddy            ) update-tooling --asset='.tar.gz' --asset='^.sig' ;;
	(circleci         ) update-tooling                                   ;;
	(delta            ) update-tooling --asset='gnu'                     ;;
	(eget             ) update-tooling                                   ;;
	(fd               ) update-tooling --asset='gnu'                     ;;
	(fzf              ) update-tooling                                   ;;
	(hx               ) update-tooling                                   ;;
	(jq               ) update-tooling                                   ;;
	(jtbl             ) update-tooling                                   ;;
	(lazydocker       ) update-tooling                                   ;;
	(lazygit          ) update-tooling                                   ;;
	(n                ) update-tooling --source                          ;;
	(redis-viewer     ) update-tooling                                   ;;
	(rg               ) update-tooling                                   ;;
	(shellcheck       ) update-tooling                                   ;;
	(static-web-server) update-tooling --asset='gnu'                     ;;
	(unison           ) update-tooling --asset='static'                  ;;
	(usql             ) update-tooling --asset='^static'                 ;;
	(xsv              ) update-tooling                                   ;;
	(yq               ) update-tooling --asset='^.tar.gz'                ;;


	# Items available as a DEB package.

	(hostctl          ) update-deb-tooling                               ;;
	(gh               ) update-deb-tooling                               ;;
	(portal           ) update-deb-tooling --asset='.deb'                ;;
	(watchexec        ) update-deb-tooling --asset='gnu' --asset='^deb.' ;;


	# Items requiring special handling.

	(aws)
		target="${HOME}/bin/vendor/aws-runtime"
		mkdir -p "$target" && rm -rf "${target:?}"/*

		mktemp --tmpdir "$TEMPFILE_TEMPLATE" | store-as zip_file
		curl "$( executable-url )" --silent --location > "$zip_file" || error-out 2 'unable to fetch release'

		mktemp --tmpdir --directory "$TEMPFILE_TEMPLATE" | store-as extract_dir
		unzip -q "$zip_file" -d "$extract_dir" || error-out 2 'unable to extract release'

		mv "${extract_dir}/aws/dist"/* "${target}/"
		rm -rf "$zip_file" "$extract_dir"
		;;

	(chruby)
		mktemp --tmpdir --directory "$TEMPFILE_TEMPLATE" | store-as extract_dir
		eget --quiet "$( github-repo )" --source --file='chruby.*' --all --to="$extract_dir"

		mv "${extract_dir}/chruby.sh" "${HOME}/bin/vendor/chruby-source"
		mv "${extract_dir}/auto.sh"   "${HOME}/bin/vendor/chruby-source.auto"
		sed -ri -e 's|\bRUBYOPT\b|RUBYOPT_X|g' "${HOME}/bin/vendor/chruby-source"*
		chmod 644 "${HOME}/bin/vendor/chruby-source"*
		rm -rf "$extract_dir"
		;;

	(crypt)
		curl "$( executable-url )" --silent --location > "$( executable )" || error-out 2 'unable to fetch release'
		chmod 755 "$( executable )"
		;;

	(heroku)
		target="${HOME}/bin/vendor/heroku-runtime"
		mkdir -p "$target" && rm -rf "${target:?}"/*

		curl "$( executable-url )" --silent --location \
		| tar --gzip --extract --strip-components=1 --directory="$target" || error-out 2 'unable to fetch/extract release'
		;;

	(ruby-install)
		target="${HOME}/bin/vendor/ruby-install-runtime"
		mkdir -p "$target" && rm -rf "${target:?}"/*

		eget --quiet "$( github-repo )" --download-only --source --to='/dev/stdout' \
		| tar --gzip --extract --strip-components=1 --directory="$target" || error-out 2 'unable to fetch/extract release'
		;;


	# Unknown tooling.

	*)
		error-out 1 "unknown tool '${tool_name}'"
		;;
esac
