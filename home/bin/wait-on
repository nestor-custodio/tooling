#! /bin/env bash
source '/home/nestor/bin/std.lib'

# ---

{ # -- Help Text -- #

	cat <<-EOF | store-as usage
		Usage: $( script-name ) [PID]

		Waits for the given process to terminate. If no PID argument is given,
		reads PIDs from STDIN until input is exhausted. This can be used to wait
		on multiple processes.
		
		Example:  pgrep ruby | $( script-name )  # Waits on all ruby processes to end.


		Mandatory arguments to long options are mandatory for short options too.
		  --help                    Show this help text.


		Exit Status:
		  0  if OK,
		  1  if invalid option.
	EOF

}

# ---

{ # -- Parameter Processing: Options -- #

	CHAR_OPTS=''
	LONG_OPTS='help'

	set-params
	while true; do
		option="$1" && shift
		case "$option" in
			(--help) exit-out "$usage" ;;
			(--) break ;;  # No more options.
		esac
	done

}

{ # -- Parameter Processing: Positionals -- #

	case "$#" in

		0)
			pid=''
			;;

		1)
			pid="$1" && shift
			;;

		*)
			error-out 1 'invalid option(s)'
			;;

	esac

}

# ---
# ---

function wait-on-pid {
	local pid="$1" && shift
	[ -n "$pid" ] || return

	[ -z "${pid//[0-9]/}" ] || error-out 1 "non-numeric PID: ${pid}"
	tail --pid="$pid" -f /dev/null
}

# ---
# ---


if [ -n "$pid" ]
	then wait-on-pid "$pid"
	else cat - | while read -r pid; do wait-on-pid "$pid"; done
fi
